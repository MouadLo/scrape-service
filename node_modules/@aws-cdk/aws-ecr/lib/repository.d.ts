import iam = require('@aws-cdk/aws-iam');
import cdk = require('@aws-cdk/cdk');
import { LifecycleRule } from './lifecycle';
import { RepositoryBase, RepositoryImportProps } from "./repository-ref";
export interface RepositoryProps {
    /**
     * Name for this repository
     *
     * @default Automatically generated name.
     */
    readonly repositoryName?: string;
    /**
     * Life cycle rules to apply to this registry
     *
     * @default No life cycle rules
     */
    readonly lifecycleRules?: LifecycleRule[];
    /**
     * The AWS account ID associated with the registry that contains the repository.
     *
     * @see https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_PutLifecyclePolicy.html
     * @default The default registry is assumed.
     */
    readonly lifecycleRegistryId?: string;
    /**
     * Retain the repository on stack deletion
     *
     * If you don't set this to true, the registry must be empty, otherwise
     * your stack deletion will fail.
     *
     * @default false
     */
    readonly retain?: boolean;
}
/**
 * Define an ECR repository
 */
export declare class Repository extends RepositoryBase {
    readonly repositoryName: string;
    readonly repositoryArn: string;
    private readonly lifecycleRules;
    private readonly registryId?;
    private policyDocument?;
    constructor(scope: cdk.Construct, id: string, props?: RepositoryProps);
    /**
     * Export this repository from the stack
     */
    export(): RepositoryImportProps;
    addToResourcePolicy(statement: iam.PolicyStatement): void;
    /**
     * Add a life cycle rule to the repository
     *
     * Life cycle rules automatically expire images from the repository that match
     * certain conditions.
     */
    addLifecycleRule(rule: LifecycleRule): void;
    /**
     * Render the life cycle policy object
     */
    private renderLifecyclePolicy;
    /**
     * Return life cycle rules with automatic ordering applied.
     *
     * Also applies validation of the 'any' rule.
     */
    private orderedLifecycleRules;
}

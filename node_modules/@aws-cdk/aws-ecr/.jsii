{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-events": {
      "dependencies": {
        "@aws-cdk/aws-iam": {
          "dependencies": {
            "@aws-cdk/cdk": {
              "dependencies": {
                "@aws-cdk/cx-api": {
                  "peer": true,
                  "targets": {
                    "dotnet": {
                      "assemblyOriginatorKeyFile": "../../key.snk",
                      "namespace": "Amazon.CDK.CXAPI",
                      "packageId": "Amazon.CDK.CXAPI",
                      "signAssembly": true
                    },
                    "java": {
                      "maven": {
                        "artifactId": "cdk-cx-api",
                        "groupId": "software.amazon.awscdk"
                      },
                      "package": "software.amazon.awscdk.cxapi"
                    },
                    "js": {
                      "npm": "@aws-cdk/cx-api"
                    },
                    "python": {
                      "distName": "aws-cdk.cx-api",
                      "module": "aws_cdk.cx_api"
                    }
                  },
                  "version": "0.28.0"
                }
              },
              "peer": true,
              "targets": {
                "dotnet": {
                  "assemblyOriginatorKeyFile": "../../key.snk",
                  "namespace": "Amazon.CDK",
                  "packageId": "Amazon.CDK",
                  "signAssembly": true
                },
                "java": {
                  "maven": {
                    "artifactId": "cdk",
                    "groupId": "software.amazon.awscdk"
                  },
                  "package": "software.amazon.awscdk"
                },
                "js": {
                  "npm": "@aws-cdk/cdk"
                },
                "python": {
                  "distName": "aws-cdk.cdk",
                  "module": "aws_cdk.cdk"
                }
              },
              "version": "0.28.0"
            },
            "@aws-cdk/region-info": {
              "peer": true,
              "targets": {
                "dotnet": {
                  "assemblyOriginatorKeyFile": "../../key.snk",
                  "namespace": "Amazon.CDK.RegionInfo",
                  "packageId": "Amazon.CDK.RegionInfo",
                  "signAssembly": true
                },
                "java": {
                  "maven": {
                    "artifactId": "cdk-region-info",
                    "groupId": "software.amazon.awscdk"
                  },
                  "package": "software.amazon.awscdk.regioninfo"
                },
                "js": {
                  "npm": "@aws-cdk/region-info"
                },
                "python": {
                  "distName": "aws-cdk.region-info",
                  "module": "aws_cdk.region_info"
                }
              },
              "version": "0.28.0"
            }
          },
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK.AWS.IAM",
              "packageId": "Amazon.CDK.AWS.IAM",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "iam",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk.services.iam"
            },
            "js": {
              "npm": "@aws-cdk/aws-iam"
            },
            "python": {
              "distName": "aws-cdk.aws-iam",
              "module": "aws_cdk.aws_iam"
            }
          },
          "version": "0.28.0"
        },
        "@aws-cdk/cdk": {
          "dependencies": {
            "@aws-cdk/cx-api": {
              "peer": true,
              "targets": {
                "dotnet": {
                  "assemblyOriginatorKeyFile": "../../key.snk",
                  "namespace": "Amazon.CDK.CXAPI",
                  "packageId": "Amazon.CDK.CXAPI",
                  "signAssembly": true
                },
                "java": {
                  "maven": {
                    "artifactId": "cdk-cx-api",
                    "groupId": "software.amazon.awscdk"
                  },
                  "package": "software.amazon.awscdk.cxapi"
                },
                "js": {
                  "npm": "@aws-cdk/cx-api"
                },
                "python": {
                  "distName": "aws-cdk.cx-api",
                  "module": "aws_cdk.cx_api"
                }
              },
              "version": "0.28.0"
            }
          },
          "peer": true,
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK",
              "packageId": "Amazon.CDK",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "cdk",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk"
            },
            "js": {
              "npm": "@aws-cdk/cdk"
            },
            "python": {
              "distName": "aws-cdk.cdk",
              "module": "aws_cdk.cdk"
            }
          },
          "version": "0.28.0"
        }
      },
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      },
      "version": "0.28.0"
    },
    "@aws-cdk/aws-iam": {
      "dependencies": {
        "@aws-cdk/cdk": {
          "dependencies": {
            "@aws-cdk/cx-api": {
              "peer": true,
              "targets": {
                "dotnet": {
                  "assemblyOriginatorKeyFile": "../../key.snk",
                  "namespace": "Amazon.CDK.CXAPI",
                  "packageId": "Amazon.CDK.CXAPI",
                  "signAssembly": true
                },
                "java": {
                  "maven": {
                    "artifactId": "cdk-cx-api",
                    "groupId": "software.amazon.awscdk"
                  },
                  "package": "software.amazon.awscdk.cxapi"
                },
                "js": {
                  "npm": "@aws-cdk/cx-api"
                },
                "python": {
                  "distName": "aws-cdk.cx-api",
                  "module": "aws_cdk.cx_api"
                }
              },
              "version": "0.28.0"
            }
          },
          "peer": true,
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK",
              "packageId": "Amazon.CDK",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "cdk",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk"
            },
            "js": {
              "npm": "@aws-cdk/cdk"
            },
            "python": {
              "distName": "aws-cdk.cdk",
              "module": "aws_cdk.cdk"
            }
          },
          "version": "0.28.0"
        },
        "@aws-cdk/region-info": {
          "peer": true,
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK.RegionInfo",
              "packageId": "Amazon.CDK.RegionInfo",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "cdk-region-info",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk.regioninfo"
            },
            "js": {
              "npm": "@aws-cdk/region-info"
            },
            "python": {
              "distName": "aws-cdk.region-info",
              "module": "aws_cdk.region_info"
            }
          },
          "version": "0.28.0"
        }
      },
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      },
      "version": "0.28.0"
    },
    "@aws-cdk/cdk": {
      "dependencies": {
        "@aws-cdk/cx-api": {
          "peer": true,
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK.CXAPI",
              "packageId": "Amazon.CDK.CXAPI",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "cdk-cx-api",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk.cxapi"
            },
            "js": {
              "npm": "@aws-cdk/cx-api"
            },
            "python": {
              "distName": "aws-cdk.cx-api",
              "module": "aws_cdk.cx_api"
            }
          },
          "version": "0.28.0"
        }
      },
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "@aws-cdk/cdk"
        },
        "python": {
          "distName": "aws-cdk.cdk",
          "module": "aws_cdk.cdk"
        }
      },
      "version": "0.28.0"
    }
  },
  "description": "The CDK Construct Library for AWS::ECR",
  "homepage": "https://github.com/awslabs/aws-cdk",
  "license": "Apache-2.0",
  "name": "@aws-cdk/aws-ecr",
  "readme": {
    "markdown": "## Amazon Elastic Container Registry Construct Library\n\nThis package contains constructs for working with Amazon Elastic Container Registry.\n\n### Repositories\n\nDefine a repository by creating a new instance of `Repository`. A repository\nholds multiple verions of a single container image.\n\n```ts\nconst repository = new ecr.Repository(this, 'Repository');\n```\n\n### Automatically clean up repositories\n\nYou can set life cycle rules to automatically clean up old images from your\nrepository. The first life cycle rule that matches an image will be applied\nagainst that image. For example, the following deletes images older than\n30 days, while keeping all images tagged with prod (note that the order\nis important here):\n\n```ts\nrepository.addLifecycleRule({ tagPrefixList: ['prod'], maxImageCount: 9999 });\nrepository.addLifecycleRule({ maxImageAgeDays: 30 });\n```\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/aws-cdk.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK.AWS.ECR",
      "packageId": "Amazon.CDK.AWS.ECR",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "ecr",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.ecr"
    },
    "js": {
      "npm": "@aws-cdk/aws-ecr"
    },
    "python": {
      "distName": "aws-cdk.aws-ecr",
      "module": "aws_cdk.aws_ecr"
    }
  },
  "types": {
    "@aws-cdk/aws-ecr.CfnRepository": {
      "assembly": "@aws-cdk/aws-ecr",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::ECR::Repository",
        "comment": "A CloudFormation `AWS::ECR::Repository`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html"
      },
      "fqn": "@aws-cdk/aws-ecr.CfnRepository",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::ECR::Repository`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecr.CfnRepositoryProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnRepository",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-ecr.CfnRepositoryProps"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "Arn"
          },
          "immutable": true,
          "name": "repositoryArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "repositoryName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.CfnRepository.LifecyclePolicyProperty": {
      "assembly": "@aws-cdk/aws-ecr",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecr-repository-lifecyclepolicy.html"
      },
      "fqn": "@aws-cdk/aws-ecr.CfnRepository.LifecyclePolicyProperty",
      "kind": "interface",
      "name": "LifecyclePolicyProperty",
      "namespace": "CfnRepository",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnRepository.LifecyclePolicyProperty.LifecyclePolicyText`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecr-repository-lifecyclepolicy.html#cfn-ecr-repository-lifecyclepolicy-lifecyclepolicytext"
          },
          "immutable": true,
          "name": "lifecyclePolicyText",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnRepository.LifecyclePolicyProperty.RegistryId`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecr-repository-lifecyclepolicy.html#cfn-ecr-repository-lifecyclepolicy-registryid"
          },
          "immutable": true,
          "name": "registryId",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.CfnRepositoryProps": {
      "assembly": "@aws-cdk/aws-ecr",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::ECR::Repository`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html"
      },
      "fqn": "@aws-cdk/aws-ecr.CfnRepositoryProps",
      "kind": "interface",
      "name": "CfnRepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::ECR::Repository.LifecyclePolicy`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html#cfn-ecr-repository-lifecyclepolicy"
          },
          "immutable": true,
          "name": "lifecyclePolicy",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/aws-ecr.CfnRepository.LifecyclePolicyProperty"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::ECR::Repository.RepositoryName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html#cfn-ecr-repository-repositoryname"
          },
          "immutable": true,
          "name": "repositoryName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::ECR::Repository.RepositoryPolicyText`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html#cfn-ecr-repository-repositorypolicytext"
          },
          "immutable": true,
          "name": "repositoryPolicyText",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.CountType": {
      "assembly": "@aws-cdk/aws-ecr",
      "docs": {
        "comment": "Select images based on counts"
      },
      "fqn": "@aws-cdk/aws-ecr.CountType",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "Set a limit on the number of images in your repository"
          },
          "name": "ImageCountMoreThan"
        },
        {
          "docs": {
            "comment": "Set an age limit on the images in your repository"
          },
          "name": "SinceImagePushed"
        }
      ],
      "name": "CountType"
    },
    "@aws-cdk/aws-ecr.IRepository": {
      "assembly": "@aws-cdk/aws-ecr",
      "docs": {
        "comment": "Represents an ECR repository."
      },
      "fqn": "@aws-cdk/aws-ecr.IRepository",
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IConstruct"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Add a policy statement to the repository's resource policy"
          },
          "name": "addToResourcePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Export this repository from the stack"
          },
          "name": "export",
          "returns": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryImportProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Grant the given principal identity permissions to perform the actions on this repository"
          },
          "name": "grant",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Grant the given identity permissions to pull images in this repository."
          },
          "name": "grantPull",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Grant the given identity permissions to pull and push images to this repository."
          },
          "name": "grantPullPush",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this\nrepository."
          },
          "name": "onImagePushed",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the rule"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)"
              },
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-events.IEventRuleTarget",
                "optional": true
              }
            },
            {
              "docs": {
                "comment": "Only trigger on the specific image tag"
              },
              "name": "imageTag",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-events.EventRule"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the URI of the repository for a certain tag. Can be used in `docker push/pull`.\n\n    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]"
          },
          "name": "repositoryUriForTag",
          "parameters": [
            {
              "docs": {
                "comment": "Image tag to use (tools usually default to \"latest\" if omitted)"
              },
              "name": "tag",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "IRepository",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The ARN of the repository"
          },
          "immutable": true,
          "name": "repositoryArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the repository"
          },
          "immutable": true,
          "name": "repositoryName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The URI of this repository (represents the latest image):\n\n    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY"
          },
          "immutable": true,
          "name": "repositoryUri",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.LifecycleRule": {
      "assembly": "@aws-cdk/aws-ecr",
      "datatype": true,
      "docs": {
        "comment": "An ECR life cycle rule"
      },
      "fqn": "@aws-cdk/aws-ecr.LifecycleRule",
      "kind": "interface",
      "name": "LifecycleRule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Describes the purpose of the rule",
            "default": "No description"
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The maximum age of images to retain\n\nSpecify exactly one of maxImageCount and maxImageAgeDays."
          },
          "immutable": true,
          "name": "maxImageAgeDays",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The maximum number of images to retain\n\nSpecify exactly one of maxImageCount and maxImageAgeDays."
          },
          "immutable": true,
          "name": "maxImageCount",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Controls the order in which rules are evaluated (low to high)\n\nAll rules must have a unique priority, where lower numbers have\nhigher precedence. The first rule that matches is applied to an image.\n\nThere can only be one rule with a tagStatus of Any, and it must have\nthe highest rulePriority.\n\nAll rules without a specified priority will have incrementing priorities\nautomatically assigned to them, higher than any rules that DO have priorities.",
            "default": "Automatically assigned"
          },
          "immutable": true,
          "name": "rulePriority",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Select images that have ALL the given prefixes in their tag.\n\nOnly if tagStatus == TagStatus.Tagged"
          },
          "immutable": true,
          "name": "tagPrefixList",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Select images based on tags\n\nOnly one rule is allowed to select untagged images, and it must\nhave the highest rulePriority.",
            "default": "TagStatus.Tagged if tagPrefixList is given, TagStatus.Any otherwise"
          },
          "immutable": true,
          "name": "tagStatus",
          "type": {
            "fqn": "@aws-cdk/aws-ecr.TagStatus",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.Repository": {
      "assembly": "@aws-cdk/aws-ecr",
      "base": {
        "fqn": "@aws-cdk/aws-ecr.RepositoryBase"
      },
      "docs": {
        "comment": "Define an ECR repository"
      },
      "fqn": "@aws-cdk/aws-ecr.Repository",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecr.RepositoryProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Add a life cycle rule to the repository\n\nLife cycle rules automatically expire images from the repository that match\ncertain conditions."
          },
          "name": "addLifecycleRule",
          "parameters": [
            {
              "name": "rule",
              "type": {
                "fqn": "@aws-cdk/aws-ecr.LifecycleRule"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Add a policy statement to the repository's resource policy"
          },
          "name": "addToResourcePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryBase"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Export this repository from the stack"
          },
          "name": "export",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryBase"
          },
          "returns": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryImportProps"
          }
        }
      ],
      "name": "Repository",
      "properties": [
        {
          "docs": {
            "comment": "The ARN of the repository"
          },
          "immutable": true,
          "name": "repositoryArn",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryBase"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The name of the repository"
          },
          "immutable": true,
          "name": "repositoryName",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryBase"
          },
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.RepositoryBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecr",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "Base class for ECR repository. Reused between imported repositories and owned repositories."
      },
      "fqn": "@aws-cdk/aws-ecr.RepositoryBase",
      "initializer": {
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The scope in which to define this construct"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "The scoped construct ID. Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-ecr.IRepository"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns an ECR ARN for a repository that resides in the same account/region\nas the current stack."
          },
          "name": "arnForLocalRepository",
          "parameters": [
            {
              "name": "repositoryName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Import a repository"
          },
          "name": "import",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-ecr.RepositoryImportProps"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Add a policy statement to the repository's resource policy"
          },
          "name": "addToResourcePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Export this repository from the stack"
          },
          "name": "export",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "returns": {
            "fqn": "@aws-cdk/aws-ecr.RepositoryImportProps"
          }
        },
        {
          "docs": {
            "comment": "Grant the given principal identity permissions to perform the actions on this repository"
          },
          "name": "grant",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Grant the given identity permissions to use the images in this repository"
          },
          "name": "grantPull",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        },
        {
          "docs": {
            "comment": "Grant the given identity permissions to pull and push images to this repository."
          },
          "name": "grantPullPush",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        },
        {
          "docs": {
            "comment": "Defines an AWS CloudWatch event rule that can trigger a target when an image is pushed to this\nrepository."
          },
          "name": "onImagePushed",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The name of the rule"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "An IEventRuleTarget to invoke when this event happens (you can add more targets using `addTarget`)"
              },
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-events.IEventRuleTarget",
                "optional": true
              }
            },
            {
              "docs": {
                "comment": "Only trigger on the specific image tag"
              },
              "name": "imageTag",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-events.EventRule"
          }
        },
        {
          "docs": {
            "comment": "Returns the URL of the repository. Can be used in `docker push/pull`.\n\n    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY[:TAG]"
          },
          "name": "repositoryUriForTag",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "parameters": [
            {
              "docs": {
                "comment": "Optional image tag"
              },
              "name": "tag",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "RepositoryBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The ARN of the repository"
          },
          "immutable": true,
          "name": "repositoryArn",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the repository"
          },
          "immutable": true,
          "name": "repositoryName",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The URI of this repository (represents the latest image):\n\n    ACCOUNT.dkr.ecr.REGION.amazonaws.com/REPOSITORY"
          },
          "immutable": true,
          "name": "repositoryUri",
          "overrides": {
            "fqn": "@aws-cdk/aws-ecr.IRepository"
          },
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.RepositoryImportProps": {
      "assembly": "@aws-cdk/aws-ecr",
      "datatype": true,
      "fqn": "@aws-cdk/aws-ecr.RepositoryImportProps",
      "kind": "interface",
      "name": "RepositoryImportProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The ARN of the repository to import.\n\nAt least one of `repositoryArn` or `repositoryName` is required.",
            "default": "If you only have a repository name and the repository is in the same\naccount/region as the current stack, you can set `repositoryName` instead\nand the ARN will be formatted with the current region and account."
          },
          "immutable": true,
          "name": "repositoryArn",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The full name of the repository to import.\n\nThis is only needed if the repository ARN is not a concrete string, in which\ncase it is impossible to safely parse the ARN and extract full repository\nnames from it if it includes multiple components (e.g. `foo/bar/myrepo`).\n\nIf the repository is in the same region/account as the stack, it is sufficient\nto only specify the repository name."
          },
          "immutable": true,
          "name": "repositoryName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.RepositoryProps": {
      "assembly": "@aws-cdk/aws-ecr",
      "datatype": true,
      "fqn": "@aws-cdk/aws-ecr.RepositoryProps",
      "kind": "interface",
      "name": "RepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS account ID associated with the registry that contains the repository.",
            "default": "The default registry is assumed.",
            "see": "https://docs.aws.amazon.com/AmazonECR/latest/APIReference/API_PutLifecyclePolicy.html"
          },
          "immutable": true,
          "name": "lifecycleRegistryId",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Life cycle rules to apply to this registry",
            "default": "No life cycle rules"
          },
          "immutable": true,
          "name": "lifecycleRules",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecr.LifecycleRule"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Name for this repository",
            "default": "Automatically generated name."
          },
          "immutable": true,
          "name": "repositoryName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Retain the repository on stack deletion\n\nIf you don't set this to true, the registry must be empty, otherwise\nyour stack deletion will fail.",
            "default": "false"
          },
          "immutable": true,
          "name": "retain",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/aws-ecr.TagStatus": {
      "assembly": "@aws-cdk/aws-ecr",
      "docs": {
        "comment": "Select images based on tags"
      },
      "fqn": "@aws-cdk/aws-ecr.TagStatus",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "Rule applies to all images"
          },
          "name": "Any"
        },
        {
          "docs": {
            "comment": "Rule applies to tagged images"
          },
          "name": "Tagged"
        },
        {
          "docs": {
            "comment": "Rule applies to untagged images"
          },
          "name": "Untagged"
        }
      ],
      "name": "TagStatus"
    }
  },
  "version": "0.28.0",
  "fingerprint": "m/TNUVaQyj5MqrMtUPwfcqyx16LwyewER6FF6ueIdvw="
}

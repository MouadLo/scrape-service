"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling_generated_1 = require("./autoscaling.generated");
const lifecycle_hook_1 = require("./lifecycle-hook");
const scheduled_action_1 = require("./scheduled-action");
const step_scaling_policy_1 = require("./step-scaling-policy");
const target_tracking_scaling_policy_1 = require("./target-tracking-scaling-policy");
/**
 * Name tag constant
 */
const NAME_TAG = 'Name';
/**
 * A Fleet represents a managed set of EC2 instances
 *
 * The Fleet models a number of AutoScalingGroups, a launch configuration, a
 * security group and an instance role.
 *
 * It allows adding arbitrary commands to the startup scripts of the instances
 * in the fleet.
 *
 * The ASG spans all availability zones.
 */
class AutoScalingGroup extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.userDataLines = new Array();
        this.securityGroups = [];
        this.loadBalancerNames = [];
        this.targetGroupArns = [];
        if (props.cooldownSeconds !== undefined && props.cooldownSeconds < 0) {
            throw new RangeError(`cooldownSeconds cannot be negative, got: ${props.cooldownSeconds}`);
        }
        this.securityGroup = new ec2.SecurityGroup(this, 'InstanceSecurityGroup', {
            vpc: props.vpc,
            allowAllOutbound: props.allowAllOutbound !== false
        });
        this.connections = new ec2.Connections({ securityGroups: [this.securityGroup] });
        this.securityGroups.push(this.securityGroup);
        this.node.apply(new cdk.Tag(NAME_TAG, this.node.path));
        this.role = props.role || new iam.Role(this, 'InstanceRole', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')
        });
        const iamProfile = new iam.CfnInstanceProfile(this, 'InstanceProfile', {
            roles: [this.role.roleName]
        });
        // use delayed evaluation
        const machineImage = props.machineImage.getImage(this);
        const userDataToken = new cdk.Token(() => cdk.Fn.base64((machineImage.os.createUserData(this.userDataLines)))).toString();
        const securityGroupsToken = new cdk.Token(() => this.securityGroups.map(sg => sg.securityGroupId));
        const launchConfig = new autoscaling_generated_1.CfnLaunchConfiguration(this, 'LaunchConfig', {
            imageId: machineImage.imageId,
            keyName: props.keyName,
            instanceType: props.instanceType.toString(),
            securityGroups: securityGroupsToken.toList(),
            iamInstanceProfile: iamProfile.ref,
            userData: userDataToken,
            associatePublicIpAddress: props.associatePublicIpAddress,
        });
        launchConfig.node.addDependency(this.role);
        const desiredCapacity = (props.desiredCapacity !== undefined ? props.desiredCapacity :
            (props.minCapacity !== undefined ? props.minCapacity :
                (props.maxCapacity !== undefined ? props.maxCapacity : 1)));
        const minCapacity = props.minCapacity !== undefined ? props.minCapacity : 1;
        const maxCapacity = props.maxCapacity !== undefined ? props.maxCapacity : desiredCapacity;
        if (desiredCapacity < minCapacity || desiredCapacity > maxCapacity) {
            throw new Error(`Should have minCapacity (${minCapacity}) <= desiredCapacity (${desiredCapacity}) <= maxCapacity (${maxCapacity})`);
        }
        const subnetIds = props.vpc.subnetIds(props.vpcSubnets);
        const asgProps = {
            cooldown: props.cooldownSeconds !== undefined ? `${props.cooldownSeconds}` : undefined,
            minSize: minCapacity.toString(),
            maxSize: maxCapacity.toString(),
            desiredCapacity: desiredCapacity.toString(),
            launchConfigurationName: launchConfig.ref,
            loadBalancerNames: new cdk.Token(() => this.loadBalancerNames.length > 0 ? this.loadBalancerNames : undefined).toList(),
            targetGroupArns: new cdk.Token(() => this.targetGroupArns.length > 0 ? this.targetGroupArns : undefined).toList(),
            notificationConfigurations: !props.notificationsTopic ? undefined : [
                {
                    topicArn: props.notificationsTopic.topicArn,
                    notificationTypes: [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ],
                }
            ],
            vpcZoneIdentifier: subnetIds
        };
        if (!props.vpc.isPublicSubnets(subnetIds) && props.associatePublicIpAddress) {
            throw new Error("To set 'associatePublicIpAddress: true' you must select Public subnets (vpcSubnets: { subnetType: SubnetType.Public })");
        }
        this.autoScalingGroup = new autoscaling_generated_1.CfnAutoScalingGroup(this, 'ASG', asgProps);
        this.osType = machineImage.os.type;
        this.autoScalingGroupName = this.autoScalingGroup.autoScalingGroupName;
        this.applyUpdatePolicies(props);
    }
    /**
     * Add the security group to all instances via the launch configuration
     * security groups array.
     *
     * @param securityGroup: The security group to add
     */
    addSecurityGroup(securityGroup) {
        this.securityGroups.push(securityGroup);
    }
    /**
     * Attach to a classic load balancer
     */
    attachToClassicLB(loadBalancer) {
        this.loadBalancerNames.push(loadBalancer.loadBalancerName);
    }
    /**
     * Attach to ELBv2 Application Target Group
     */
    attachToApplicationTargetGroup(targetGroup) {
        this.targetGroupArns.push(targetGroup.targetGroupArn);
        this.albTargetGroup = targetGroup;
        targetGroup.registerConnectable(this);
        return { targetType: elbv2.TargetType.Instance };
    }
    /**
     * Attach to ELBv2 Application Target Group
     */
    attachToNetworkTargetGroup(targetGroup) {
        this.targetGroupArns.push(targetGroup.targetGroupArn);
        return { targetType: elbv2.TargetType.Instance };
    }
    /**
     * Add command to the startup script of fleet instances.
     * The command must be in the scripting language supported by the fleet's OS (i.e. Linux/Windows).
     */
    addUserData(...scriptLines) {
        scriptLines.forEach(scriptLine => this.userDataLines.push(scriptLine));
    }
    /**
     * Scale out or in based on time
     */
    scaleOnSchedule(id, props) {
        return new scheduled_action_1.ScheduledAction(this, `ScheduledAction${id}`, Object.assign({ autoScalingGroup: this }, props));
    }
    /**
     * Scale out or in to achieve a target CPU utilization
     */
    scaleOnCpuUtilization(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, `ScalingPolicy${id}`, Object.assign({ autoScalingGroup: this, predefinedMetric: target_tracking_scaling_policy_1.PredefinedMetric.ASGAverageCPUUtilization, targetValue: props.targetUtilizationPercent }, props));
    }
    /**
     * Scale out or in to achieve a target network ingress rate
     */
    scaleOnIncomingBytes(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, `ScalingPolicy${id}`, Object.assign({ autoScalingGroup: this, predefinedMetric: target_tracking_scaling_policy_1.PredefinedMetric.ASGAverageNetworkIn, targetValue: props.targetBytesPerSecond }, props));
    }
    /**
     * Scale out or in to achieve a target network egress rate
     */
    scaleOnOutgoingBytes(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, `ScalingPolicy${id}`, Object.assign({ autoScalingGroup: this, predefinedMetric: target_tracking_scaling_policy_1.PredefinedMetric.ASGAverageNetworkOut, targetValue: props.targetBytesPerSecond }, props));
    }
    /**
     * Scale out or in to achieve a target request handling rate
     *
     * The AutoScalingGroup must have been attached to an Application Load Balancer
     * in order to be able to call this.
     */
    scaleOnRequestCount(id, props) {
        if (this.albTargetGroup === undefined) {
            throw new Error('Attach the AutoScalingGroup to an Application Load Balancer before calling scaleOnRequestCount()');
        }
        const resourceLabel = `${this.albTargetGroup.firstLoadBalancerFullName}/${this.albTargetGroup.targetGroupFullName}`;
        const policy = new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, `ScalingPolicy${id}`, Object.assign({ autoScalingGroup: this, predefinedMetric: target_tracking_scaling_policy_1.PredefinedMetric.ALBRequestCountPerTarget, targetValue: props.targetRequestsPerSecond, resourceLabel }, props));
        policy.node.addDependency(this.albTargetGroup.loadBalancerAttached);
        return policy;
    }
    /**
     * Scale out or in in order to keep a metric around a target value
     */
    scaleToTrackMetric(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, `ScalingPolicy${id}`, Object.assign({ autoScalingGroup: this, customMetric: props.metric }, props));
    }
    /**
     * Scale out or in, in response to a metric
     */
    scaleOnMetric(id, props) {
        return new step_scaling_policy_1.StepScalingPolicy(this, id, Object.assign({}, props, { autoScalingGroup: this }));
    }
    /**
     * Adds a statement to the IAM role assumed by instances of this fleet.
     */
    addToRolePolicy(statement) {
        this.role.addToPolicy(statement);
    }
    /**
     * Send a message to either an SQS queue or SNS topic when instances launch or terminate
     */
    onLifecycleTransition(id, props) {
        return new lifecycle_hook_1.LifecycleHook(this, `LifecycleHook${id}`, Object.assign({ autoScalingGroup: this }, props));
    }
    /**
     * Apply CloudFormation update policies for the AutoScalingGroup
     */
    applyUpdatePolicies(props) {
        if (props.updateType === UpdateType.ReplacingUpdate) {
            this.autoScalingGroup.options.updatePolicy = Object.assign({}, this.autoScalingGroup.options.updatePolicy, { autoScalingReplacingUpdate: {
                    willReplace: true
                } });
            if (props.replacingUpdateMinSuccessfulInstancesPercent !== undefined) {
                // Yes, this goes on CreationPolicy, not as a process parameter to ReplacingUpdate.
                // It's a little confusing, but the docs seem to explicitly state it will only be used
                // during the update?
                //
                // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html
                this.autoScalingGroup.options.creationPolicy = Object.assign({}, this.autoScalingGroup.options.creationPolicy, { autoScalingCreationPolicy: {
                        minSuccessfulInstancesPercent: validatePercentage(props.replacingUpdateMinSuccessfulInstancesPercent)
                    } });
            }
        }
        else if (props.updateType === UpdateType.RollingUpdate) {
            this.autoScalingGroup.options.updatePolicy = Object.assign({}, this.autoScalingGroup.options.updatePolicy, { autoScalingRollingUpdate: renderRollingUpdateConfig(props.rollingUpdateConfiguration) });
        }
        // undefined is treated as 'true'
        if (props.ignoreUnmodifiedSizeProperties !== false) {
            this.autoScalingGroup.options.updatePolicy = Object.assign({}, this.autoScalingGroup.options.updatePolicy, { autoScalingScheduledAction: { ignoreUnmodifiedGroupSizeProperties: true } });
        }
        if (props.resourceSignalCount !== undefined || props.resourceSignalTimeoutSec !== undefined) {
            this.autoScalingGroup.options.creationPolicy = Object.assign({}, this.autoScalingGroup.options.creationPolicy, { resourceSignal: {
                    count: props.resourceSignalCount,
                    timeout: props.resourceSignalTimeoutSec !== undefined ? renderIsoDuration(props.resourceSignalTimeoutSec) : undefined,
                } });
        }
    }
}
exports.AutoScalingGroup = AutoScalingGroup;
/**
 * The type of update to perform on instances in this AutoScalingGroup
 */
var UpdateType;
(function (UpdateType) {
    /**
     * Don't do anything
     */
    UpdateType["None"] = "None";
    /**
     * Replace the entire AutoScalingGroup
     *
     * Builds a new AutoScalingGroup first, then delete the old one.
     */
    UpdateType["ReplacingUpdate"] = "Replace";
    /**
     * Replace the instances in the AutoScalingGroup.
     */
    UpdateType["RollingUpdate"] = "RollingUpdate";
})(UpdateType = exports.UpdateType || (exports.UpdateType = {}));
var ScalingProcess;
(function (ScalingProcess) {
    ScalingProcess["Launch"] = "Launch";
    ScalingProcess["Terminate"] = "Terminate";
    ScalingProcess["HealthCheck"] = "HealthCheck";
    ScalingProcess["ReplaceUnhealthy"] = "ReplaceUnhealthy";
    ScalingProcess["AZRebalance"] = "AZRebalance";
    ScalingProcess["AlarmNotification"] = "AlarmNotification";
    ScalingProcess["ScheduledActions"] = "ScheduledActions";
    ScalingProcess["AddToLoadBalancer"] = "AddToLoadBalancer";
})(ScalingProcess = exports.ScalingProcess || (exports.ScalingProcess = {}));
/**
 * Render the rolling update configuration into the appropriate object
 */
function renderRollingUpdateConfig(config = {}) {
    const waitOnResourceSignals = config.minSuccessfulInstancesPercent !== undefined ? true : false;
    const pauseTimeSec = config.pauseTimeSec !== undefined ? config.pauseTimeSec : (waitOnResourceSignals ? 300 : 0);
    return {
        maxBatchSize: config.maxBatchSize,
        minInstancesInService: config.minInstancesInService,
        minSuccessfulInstancesPercent: validatePercentage(config.minSuccessfulInstancesPercent),
        waitOnResourceSignals,
        pauseTime: renderIsoDuration(pauseTimeSec),
        suspendProcesses: config.suspendProcesses !== undefined ? config.suspendProcesses :
            // Recommended list of processes to suspend from here:
            // https://aws.amazon.com/premiumsupport/knowledge-center/auto-scaling-group-rolling-updates/
            [ScalingProcess.HealthCheck, ScalingProcess.ReplaceUnhealthy, ScalingProcess.AZRebalance,
                ScalingProcess.AlarmNotification, ScalingProcess.ScheduledActions],
    };
}
/**
 * Render a number of seconds to a PTnX string.
 */
function renderIsoDuration(seconds) {
    const ret = [];
    if (seconds === 0) {
        return 'PT0S';
    }
    if (seconds >= 3600) {
        ret.push(`${Math.floor(seconds / 3600)}H`);
        seconds %= 3600;
    }
    if (seconds >= 60) {
        ret.push(`${Math.floor(seconds / 60)}M`);
        seconds %= 60;
    }
    if (seconds > 0) {
        ret.push(`${seconds}S`);
    }
    return 'PT' + ret.join('');
}
function validatePercentage(x) {
    if (x === undefined || (0 <= x && x <= 100)) {
        return x;
    }
    throw new Error(`Expected: a percentage 0..100, got: ${x}`);
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling_generated_1 = require("./autoscaling.generated");
class LifecycleHook extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('autoscaling.amazonaws.com')
        });
        const targetProps = props.notificationTarget.asLifecycleHookTarget(this);
        const resource = new autoscaling_generated_1.CfnLifecycleHook(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeoutSec,
            lifecycleHookName: props.lifecycleHookName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: targetProps.notificationTargetArn,
            roleArn: this.role.roleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        resource.node.addDependency(this.role);
        this.lifecycleHookName = resource.lifecycleHookName;
    }
}
exports.LifecycleHook = LifecycleHook;
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["Continue"] = "CONTINUE";
    DefaultResult["Abandon"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    /**
     * Execute the hook when an instance is about to be added
     */
    LifecycleTransition["InstanceLaunching"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    /**
     * Execute the hook when an instance is about to be terminated
     */
    LifecycleTransition["InstanceTerminating"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWZlY3ljbGUtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHdDQUF5QztBQUN6QyxvQ0FBcUM7QUFFckMsbUVBQTJEO0FBOEQzRCxNQUFhLGFBQWMsU0FBUSxHQUFHLENBQUMsU0FBUztJQVc5QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1lBQ25ELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQztTQUNqRSxDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekUsTUFBTSxRQUFRLEdBQUcsSUFBSSx3Q0FBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7WUFDakUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDM0MsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQscUJBQXFCLEVBQUUsV0FBVyxDQUFDLHFCQUFxQjtZQUN4RCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1NBQzNCLENBQUMsQ0FBQztRQUVILDRFQUE0RTtRQUM1RSw0RUFBNEU7UUFDNUUsa0JBQWtCO1FBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQXRDRCxzQ0FzQ0M7QUFFRCxJQUFZLGFBR1g7QUFIRCxXQUFZLGFBQWE7SUFDdkIsc0NBQXFCLENBQUE7SUFDckIsb0NBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLG1CQVVYO0FBVkQsV0FBWSxtQkFBbUI7SUFDN0I7O09BRUc7SUFDSCwrRUFBd0QsQ0FBQTtJQUV4RDs7T0FFRztJQUNILG1GQUE0RCxDQUFBO0FBQzlELENBQUMsRUFWVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQVU5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtYXV0b3NjYWxpbmctYXBpJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgSUF1dG9TY2FsaW5nR3JvdXAgfSBmcm9tICcuL2F1dG8tc2NhbGluZy1ncm91cCc7XG5pbXBvcnQgeyBDZm5MaWZlY3ljbGVIb29rIH0gZnJvbSAnLi9hdXRvc2NhbGluZy5nZW5lcmF0ZWQnO1xuXG4vKipcbiAqIEJhc2ljIHByb3BlcnRpZXMgZm9yIGEgbGlmZWN5Y2xlIGhvb2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0xpZmVjeWNsZUhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKlxuICAgKiBAZGVmYXVsdCBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBuYW1lXG4gICAqL1xuICByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0aGUgQXV0byBTY2FsaW5nIGdyb3VwIHRha2VzIHdoZW4gdGhlIGxpZmVjeWNsZSBob29rIHRpbWVvdXQgZWxhcHNlcyBvciBpZiBhbiB1bmV4cGVjdGVkIGZhaWx1cmUgb2NjdXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBDb250aW51ZVxuICAgKi9cbiAgcmVhZG9ubHkgZGVmYXVsdFJlc3VsdD86IERlZmF1bHRSZXN1bHQ7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gdGltZSBiZXR3ZWVuIGNhbGxzIHRvIFJlY29yZExpZmVjeWNsZUFjdGlvbkhlYXJ0YmVhdCBmb3IgdGhlIGhvb2tcbiAgICpcbiAgICogSWYgdGhlIGxpZmVjeWNsZSBob29rIHRpbWVzIG91dCwgcGVyZm9ybSB0aGUgYWN0aW9uIGluIERlZmF1bHRSZXN1bHQuXG4gICAqL1xuICByZWFkb25seSBoZWFydGJlYXRUaW1lb3V0U2VjPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdGUgb2YgdGhlIEFtYXpvbiBFQzIgaW5zdGFuY2UgdG8gd2hpY2ggeW91IHdhbnQgdG8gYXR0YWNoIHRoZSBsaWZlY3ljbGUgaG9vay5cbiAgICovXG4gIHJlYWRvbmx5IGxpZmVjeWNsZVRyYW5zaXRpb246IExpZmVjeWNsZVRyYW5zaXRpb247XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZGF0YSB0byBwYXNzIHRvIHRoZSBsaWZlY3ljbGUgaG9vayB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgTm8gbWV0YWRhdGFcbiAgICovXG4gIHJlYWRvbmx5IG5vdGlmaWNhdGlvbk1ldGFkYXRhPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKi9cbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uVGFyZ2V0OiBhcGkuSUxpZmVjeWNsZUhvb2tUYXJnZXQ7XG5cbiAgLyoqXG4gICAqIFRoZSByb2xlIHRoYXQgYWxsb3dzIHB1Ymxpc2hpbmcgdG8gdGhlIG5vdGlmaWNhdGlvbiB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgQSByb2xlIGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZFxuICAgKi9cbiAgcmVhZG9ubHkgcm9sZT86IGlhbS5JUm9sZTtcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIExpZmVjeWNsZSBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGlmZWN5Y2xlSG9va1Byb3BzIGV4dGVuZHMgQmFzaWNMaWZlY3ljbGVIb29rUHJvcHMge1xuICAvKipcbiAgICogVGhlIEF1dG9TY2FsaW5nR3JvdXAgdG8gYWRkIHRoZSBsaWZlY3ljbGUgaG9vayB0b1xuICAgKi9cbiAgcmVhZG9ubHkgYXV0b1NjYWxpbmdHcm91cDogSUF1dG9TY2FsaW5nR3JvdXA7XG59XG5cbmV4cG9ydCBjbGFzcyBMaWZlY3ljbGVIb29rIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIGFwaS5JTGlmZWN5Y2xlSG9vayB7XG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0aGF0IGFsbG93cyB0aGUgQVNHIHRvIHB1Ymxpc2ggdG8gdGhlIG5vdGlmaWNhdGlvbiB0YXJnZXRcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgbGlmZWN5Y2xlIGhvb2tcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTGlmZWN5Y2xlSG9va1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIHRoaXMucm9sZSA9IHByb3BzLnJvbGUgfHwgbmV3IGlhbS5Sb2xlKHRoaXMsICdSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2F1dG9zY2FsaW5nLmFtYXpvbmF3cy5jb20nKVxuICAgIH0pO1xuXG4gICAgY29uc3QgdGFyZ2V0UHJvcHMgPSBwcm9wcy5ub3RpZmljYXRpb25UYXJnZXQuYXNMaWZlY3ljbGVIb29rVGFyZ2V0KHRoaXMpO1xuXG4gICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgQ2ZuTGlmZWN5Y2xlSG9vayh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwTmFtZTogcHJvcHMuYXV0b1NjYWxpbmdHcm91cC5hdXRvU2NhbGluZ0dyb3VwTmFtZSxcbiAgICAgIGRlZmF1bHRSZXN1bHQ6IHByb3BzLmRlZmF1bHRSZXN1bHQsXG4gICAgICBoZWFydGJlYXRUaW1lb3V0OiBwcm9wcy5oZWFydGJlYXRUaW1lb3V0U2VjLFxuICAgICAgbGlmZWN5Y2xlSG9va05hbWU6IHByb3BzLmxpZmVjeWNsZUhvb2tOYW1lLFxuICAgICAgbGlmZWN5Y2xlVHJhbnNpdGlvbjogcHJvcHMubGlmZWN5Y2xlVHJhbnNpdGlvbixcbiAgICAgIG5vdGlmaWNhdGlvbk1ldGFkYXRhOiBwcm9wcy5ub3RpZmljYXRpb25NZXRhZGF0YSxcbiAgICAgIG5vdGlmaWNhdGlvblRhcmdldEFybjogdGFyZ2V0UHJvcHMubm90aWZpY2F0aW9uVGFyZ2V0QXJuLFxuICAgICAgcm9sZUFybjogdGhpcy5yb2xlLnJvbGVBcm4sXG4gICAgfSk7XG5cbiAgICAvLyBBIExpZmVjeWNsZUhvb2sgcmVzb3VyY2UgaXMgZ29pbmcgdG8gZG8gYSBwZXJtaXNzaW9ucyB0ZXN0IHVwb24gY3JlYXRpb24sXG4gICAgLy8gc28gd2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhlIHJvbGUgaGFzIGZ1bGwgcGVybWlzc2lvbnMgYmVmb3JlIGNyZWF0aW5nIHRoZVxuICAgIC8vIGxpZmVjeWNsZSBob29rLlxuICAgIHJlc291cmNlLm5vZGUuYWRkRGVwZW5kZW5jeSh0aGlzLnJvbGUpO1xuXG4gICAgdGhpcy5saWZlY3ljbGVIb29rTmFtZSA9IHJlc291cmNlLmxpZmVjeWNsZUhvb2tOYW1lO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIERlZmF1bHRSZXN1bHQge1xuICBDb250aW51ZSA9ICdDT05USU5VRScsXG4gIEFiYW5kb24gPSAnQUJBTkRPTicsXG59XG5cbi8qKlxuICogV2hhdCBpbnN0YW5jZSB0cmFuc2l0aW9uIHRvIGF0dGFjaCB0aGUgaG9vayB0b1xuICovXG5leHBvcnQgZW51bSBMaWZlY3ljbGVUcmFuc2l0aW9uIHtcbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSBhZGRlZFxuICAgKi9cbiAgSW5zdGFuY2VMYXVuY2hpbmcgPSAnYXV0b3NjYWxpbmc6RUMyX0lOU1RBTkNFX0xBVU5DSElORycsXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSB0ZXJtaW5hdGVkXG4gICAqL1xuICBJbnN0YW5jZVRlcm1pbmF0aW5nID0gJ2F1dG9zY2FsaW5nOkVDMl9JTlNUQU5DRV9URVJNSU5BVElORycsXG59XG4iXX0=
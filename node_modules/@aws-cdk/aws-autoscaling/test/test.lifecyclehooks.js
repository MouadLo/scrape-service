"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling = require("../lib");
class FakeNotificationTarget {
    asLifecycleHookTarget(lifecycleHook) {
        lifecycleHook.role.addToPolicy(new iam.PolicyStatement()
            .addAction('action:Work')
            .addAllResources());
        return { notificationTargetArn: 'target:arn', };
    }
}
module.exports = {
    'we can add a lifecycle hook to an ASG'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
        });
        // WHEN
        asg.onLifecycleTransition('Transition', {
            notificationTarget: new FakeNotificationTarget(),
            lifecycleTransition: autoscaling.LifecycleTransition.InstanceLaunching,
            defaultResult: autoscaling.DefaultResult.Abandon,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::LifecycleHook', {
            LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING",
            DefaultResult: "ABANDON",
            NotificationTargetARN: "target:arn",
        }));
        // Lifecycle Hook has a dependency on the policy object
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::LifecycleHook', {
            DependsOn: [
                "ASGLifecycleHookTransitionRoleDefaultPolicy2E50C7DB",
                "ASGLifecycleHookTransitionRole3AAA6BB7",
            ]
        }, assert_1.ResourcePart.CompleteDefinition));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "sts:AssumeRole",
                        Effect: "Allow",
                        Principal: { Service: { "Fn::Join": ["", ["autoscaling.", { Ref: "AWS::URLSuffix" }]] } }
                    }
                ],
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "action:Work",
                        Effect: "Allow",
                        Resource: "*"
                    }
                ],
            }
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5saWZlY3ljbGVob29rcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QubGlmZWN5Y2xlaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUFxRTtBQUVyRSx3Q0FBeUM7QUFDekMsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUVyQyxzQ0FBdUM7QUFpRXZDLE1BQU0sc0JBQXNCO0lBQ25CLHFCQUFxQixDQUFDLGFBQTZDO1FBQ3hFLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUNyRCxTQUFTLENBQUMsYUFBYSxDQUFDO2FBQ3hCLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDdEIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksR0FBRyxDQUFDO0lBQ2xELENBQUM7Q0FDRjtBQXRFRCxpQkFBUztJQUNQLHVDQUF1QyxDQUFDLElBQVU7UUFDaEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtZQUN6RCxHQUFHO1lBQ0gsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQ3BGLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUN6QyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRTtZQUN0QyxrQkFBa0IsRUFBRSxJQUFJLHNCQUFzQixFQUFFO1lBQ2hELG1CQUFtQixFQUFFLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUI7WUFDdEUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxhQUFhLENBQUMsT0FBTztTQUNqRCxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGlDQUFpQyxFQUFFO1lBQy9ELG1CQUFtQixFQUFFLG9DQUFvQztZQUN6RCxhQUFhLEVBQUUsU0FBUztZQUN4QixxQkFBcUIsRUFBRSxZQUFZO1NBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUosdURBQXVEO1FBQ3ZELGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxpQ0FBaUMsRUFBRTtZQUMvRCxTQUFTLEVBQUU7Z0JBQ1QscURBQXFEO2dCQUNyRCx3Q0FBd0M7YUFDekM7U0FDRixFQUFFLHFCQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBRXJDLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxnQkFBZ0IsRUFBRTtZQUM5Qyx3QkFBd0IsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxNQUFNLEVBQUUsZ0JBQWdCO3dCQUN4QixNQUFNLEVBQUUsT0FBTzt3QkFDZixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUUsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtxQkFDMUY7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGtCQUFrQixFQUFFO1lBQ2hELGNBQWMsRUFBRTtnQkFDZCxPQUFPLEVBQUUsWUFBWTtnQkFDckIsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE1BQU0sRUFBRSxhQUFhO3dCQUNyQixNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUUsR0FBRztxQkFDZDtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCwgaGF2ZVJlc291cmNlLCBSZXNvdXJjZVBhcnQgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0IGF1dG9zY2FsaW5nX2FwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hdXRvc2NhbGluZy1hcGknKTtcbmltcG9ydCBlYzIgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZWMyJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCBhdXRvc2NhbGluZyA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5leHBvcnQgPSB7XG4gICd3ZSBjYW4gYWRkIGEgbGlmZWN5Y2xlIGhvb2sgdG8gYW4gQVNHJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwY05ldHdvcmsoc3RhY2ssICdWUEMnKTtcbiAgICBjb25zdCBhc2cgPSBuZXcgYXV0b3NjYWxpbmcuQXV0b1NjYWxpbmdHcm91cChzdGFjaywgJ0FTRycsIHtcbiAgICAgIHZwYyxcbiAgICAgIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGVQYWlyKGVjMi5JbnN0YW5jZUNsYXNzLk00LCBlYzIuSW5zdGFuY2VTaXplLk1pY3JvKSxcbiAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLm9uTGlmZWN5Y2xlVHJhbnNpdGlvbignVHJhbnNpdGlvbicsIHtcbiAgICAgIG5vdGlmaWNhdGlvblRhcmdldDogbmV3IEZha2VOb3RpZmljYXRpb25UYXJnZXQoKSxcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IGF1dG9zY2FsaW5nLkxpZmVjeWNsZVRyYW5zaXRpb24uSW5zdGFuY2VMYXVuY2hpbmcsXG4gICAgICBkZWZhdWx0UmVzdWx0OiBhdXRvc2NhbGluZy5EZWZhdWx0UmVzdWx0LkFiYW5kb24sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OkxpZmVjeWNsZUhvb2snLCB7XG4gICAgICBMaWZlY3ljbGVUcmFuc2l0aW9uOiBcImF1dG9zY2FsaW5nOkVDMl9JTlNUQU5DRV9MQVVOQ0hJTkdcIixcbiAgICAgIERlZmF1bHRSZXN1bHQ6IFwiQUJBTkRPTlwiLFxuICAgICAgTm90aWZpY2F0aW9uVGFyZ2V0QVJOOiBcInRhcmdldDphcm5cIixcbiAgICB9KSk7XG5cbiAgICAvLyBMaWZlY3ljbGUgSG9vayBoYXMgYSBkZXBlbmRlbmN5IG9uIHRoZSBwb2xpY3kgb2JqZWN0XG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OkxpZmVjeWNsZUhvb2snLCB7XG4gICAgICBEZXBlbmRzT246IFtcbiAgICAgICAgXCJBU0dMaWZlY3ljbGVIb29rVHJhbnNpdGlvblJvbGVEZWZhdWx0UG9saWN5MkU1MEM3REJcIixcbiAgICAgICAgXCJBU0dMaWZlY3ljbGVIb29rVHJhbnNpdGlvblJvbGUzQUFBNkJCN1wiLFxuICAgICAgXVxuICAgIH0sIFJlc291cmNlUGFydC5Db21wbGV0ZURlZmluaXRpb24pKTtcblxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OklBTTo6Um9sZScsIHtcbiAgICAgIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogXCJzdHM6QXNzdW1lUm9sZVwiLFxuICAgICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgICBQcmluY2lwYWw6IHsgU2VydmljZTogeyBcIkZuOjpKb2luXCI6IFtcIlwiLCBbXCJhdXRvc2NhbGluZy5cIiwgeyBSZWY6IFwiQVdTOjpVUkxTdWZmaXhcIiB9XV0gfSB9XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgICAgUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgICBTdGF0ZW1lbnQ6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBBY3Rpb246IFwiYWN0aW9uOldvcmtcIixcbiAgICAgICAgICAgIEVmZmVjdDogXCJBbGxvd1wiLFxuICAgICAgICAgICAgUmVzb3VyY2U6IFwiKlwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuXG5jbGFzcyBGYWtlTm90aWZpY2F0aW9uVGFyZ2V0IGltcGxlbWVudHMgYXV0b3NjYWxpbmdfYXBpLklMaWZlY3ljbGVIb29rVGFyZ2V0IHtcbiAgcHVibGljIGFzTGlmZWN5Y2xlSG9va1RhcmdldChsaWZlY3ljbGVIb29rOiBhdXRvc2NhbGluZ19hcGkuSUxpZmVjeWNsZUhvb2spOiBhdXRvc2NhbGluZ19hcGkuTGlmZWN5Y2xlSG9va1RhcmdldFByb3BzIHtcbiAgICBsaWZlY3ljbGVIb29rLnJvbGUuYWRkVG9Qb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoKVxuICAgICAgLmFkZEFjdGlvbignYWN0aW9uOldvcmsnKVxuICAgICAgLmFkZEFsbFJlc291cmNlcygpKTtcbiAgICByZXR1cm4geyBub3RpZmljYXRpb25UYXJnZXRBcm46ICd0YXJnZXQ6YXJuJywgfTtcbiAgfVxufVxuIl19
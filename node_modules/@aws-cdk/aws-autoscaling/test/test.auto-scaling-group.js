"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const autoscaling = require("../lib");
function mockVpc(stack) {
    return ec2.VpcNetwork.import(stack, 'MyVpc', {
        vpcId: 'my-vpc',
        availabilityZones: ['az1'],
        publicSubnetIds: ['pub1'],
        privateSubnetIds: ['pri1'],
        isolatedSubnetIds: [],
    });
}
function mockSecurityGroup(stack) {
    return ec2.SecurityGroup.import(stack, 'MySG', {
        securityGroupId: 'most-secure',
    });
}
function getTestStack() {
    return new cdk.Stack(undefined, 'TestStack', { env: { account: '1234', region: 'us-east-1' } });
}
module.exports = {
    'default fleet'(test) {
        const stack = getTestStack();
        const vpc = mockVpc(stack);
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyFleetInstanceSecurityGroup774E8234": {
                    "Type": "AWS::EC2::SecurityGroup",
                    "Properties": {
                        "GroupDescription": "MyFleet/InstanceSecurityGroup",
                        "SecurityGroupEgress": [
                            {
                                "CidrIp": "0.0.0.0/0",
                                "Description": "Allow all outbound traffic by default",
                                "IpProtocol": "-1",
                            }
                        ],
                        "SecurityGroupIngress": [],
                        "Tags": [
                            {
                                "Key": "Name",
                                "Value": "MyFleet"
                            }
                        ],
                        "VpcId": "my-vpc"
                    }
                },
                "MyFleetInstanceRole25A84AB8": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                        "AssumeRolePolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": {
                                        "Service": "ec2.amazonaws.com"
                                    }
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    }
                },
                "MyFleetInstanceProfile70A58496": {
                    "Type": "AWS::IAM::InstanceProfile",
                    "Properties": {
                        "Roles": [
                            {
                                "Ref": "MyFleetInstanceRole25A84AB8"
                            }
                        ]
                    }
                },
                "MyFleetLaunchConfig5D7F9801": {
                    "Type": "AWS::AutoScaling::LaunchConfiguration",
                    "Properties": {
                        "IamInstanceProfile": {
                            "Ref": "MyFleetInstanceProfile70A58496"
                        },
                        "ImageId": "dummy",
                        "InstanceType": "m4.micro",
                        "SecurityGroups": [
                            {
                                "Fn::GetAtt": [
                                    "MyFleetInstanceSecurityGroup774E8234",
                                    "GroupId"
                                ]
                            }
                        ],
                        "UserData": {
                            "Fn::Base64": "#!/bin/bash\n"
                        }
                    },
                    "DependsOn": [
                        "MyFleetInstanceRole25A84AB8"
                    ]
                },
                "MyFleetASG88E55886": {
                    "Type": "AWS::AutoScaling::AutoScalingGroup",
                    "UpdatePolicy": {
                        "AutoScalingScheduledAction": {
                            "IgnoreUnmodifiedGroupSizeProperties": true
                        }
                    },
                    "Properties": {
                        "DesiredCapacity": "1",
                        "LaunchConfigurationName": {
                            "Ref": "MyFleetLaunchConfig5D7F9801"
                        },
                        "Tags": [
                            {
                                "Key": "Name",
                                "PropagateAtLaunch": true,
                                "Value": "MyFleet"
                            }
                        ],
                        "MaxSize": "1",
                        "MinSize": "1",
                        "VPCZoneIdentifier": [
                            "pri1"
                        ]
                    }
                }
            }
        });
        test.done();
    },
    'can set minCapacity, maxCapacity, desiredCapacity to 0'(test) {
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            minCapacity: 0,
            maxCapacity: 0,
            desiredCapacity: 0
        });
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::AutoScalingGroup", {
            MinSize: "0",
            MaxSize: "0",
            DesiredCapacity: "0",
        }));
        test.done();
    },
    'can specify only min capacity'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            minCapacity: 10
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::AutoScalingGroup", {
            MinSize: "10",
            MaxSize: "10",
            DesiredCapacity: "10",
        }));
        test.done();
    },
    'can specify only max capacity'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            maxCapacity: 10
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::AutoScalingGroup", {
            MinSize: "1",
            MaxSize: "10",
            DesiredCapacity: "10",
        }));
        test.done();
    },
    'can specify only desiredCount'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            desiredCapacity: 10
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::AutoScalingGroup", {
            MinSize: "1",
            MaxSize: "10",
            DesiredCapacity: "10",
        }));
        test.done();
    },
    'addToRolePolicy can be used to add statements to the role policy'(test) {
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        const fleet = new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc
        });
        fleet.addToRolePolicy(new iam.PolicyStatement()
            .addAction('test:SpecialName')
            .addAllResources());
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "test:SpecialName",
                        Effect: "Allow",
                        Resource: "*"
                    }
                ],
            },
        }));
        test.done();
    },
    'can configure replacing update'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            updateType: autoscaling.UpdateType.ReplacingUpdate,
            replacingUpdateMinSuccessfulInstancesPercent: 50
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::AutoScaling::AutoScalingGroup", {
            UpdatePolicy: {
                AutoScalingReplacingUpdate: {
                    WillReplace: true
                }
            },
            CreationPolicy: {
                AutoScalingCreationPolicy: {
                    MinSuccessfulInstancesPercent: 50
                }
            }
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
    'can configure rolling update'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            updateType: autoscaling.UpdateType.RollingUpdate,
            rollingUpdateConfiguration: {
                minSuccessfulInstancesPercent: 50,
                pauseTimeSec: 345
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::AutoScaling::AutoScalingGroup", {
            UpdatePolicy: {
                "AutoScalingRollingUpdate": {
                    "MinSuccessfulInstancesPercent": 50,
                    "WaitOnResourceSignals": true,
                    "PauseTime": "PT5M45S",
                    "SuspendProcesses": ["HealthCheck", "ReplaceUnhealthy", "AZRebalance", "AlarmNotification", "ScheduledActions"]
                },
            }
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
    'can configure resource signals'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            resourceSignalCount: 5,
            resourceSignalTimeoutSec: 666
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike("AWS::AutoScaling::AutoScalingGroup", {
            CreationPolicy: {
                ResourceSignal: {
                    Count: 5,
                    Timeout: 'PT11M6S'
                },
            }
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
    'can add Security Group to Fleet'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' } });
        const vpc = mockVpc(stack);
        // WHEN
        const asg = new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
        });
        asg.addSecurityGroup(mockSecurityGroup(stack));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::LaunchConfiguration", {
            SecurityGroups: [
                {
                    "Fn::GetAtt": [
                        "MyFleetInstanceSecurityGroup774E8234",
                        "GroupId"
                    ]
                },
                'most-secure'
            ],
        }));
        test.done();
    },
    'can set tags'(test) {
        // GIVEN
        const stack = getTestStack();
        // new cdk.Stack(undefined, 'MyStack', { env: { region: 'us-east-1', account: '1234' }});
        const vpc = mockVpc(stack);
        // WHEN
        const asg = new autoscaling.AutoScalingGroup(stack, 'MyFleet', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            updateType: autoscaling.UpdateType.RollingUpdate,
            rollingUpdateConfiguration: {
                minSuccessfulInstancesPercent: 50,
                pauseTimeSec: 345
            },
        });
        asg.node.apply(new cdk.Tag('superfood', 'acai'));
        asg.node.apply(new cdk.Tag('notsuper', 'caramel', { applyToLaunchedInstances: false }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::AutoScalingGroup", {
            Tags: [
                {
                    Key: 'Name',
                    PropagateAtLaunch: true,
                    Value: 'MyFleet',
                },
                {
                    Key: 'superfood',
                    PropagateAtLaunch: true,
                    Value: 'acai',
                },
                {
                    Key: 'notsuper',
                    PropagateAtLaunch: false,
                    Value: 'caramel',
                },
            ]
        }));
        test.done();
    },
    'allows association of public IP address'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyStack', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            minCapacity: 0,
            maxCapacity: 0,
            desiredCapacity: 0,
            vpcSubnets: { subnetType: ec2.SubnetType.Public },
            associatePublicIpAddress: true,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::LaunchConfiguration", {
            AssociatePublicIpAddress: true,
        }));
        test.done();
    },
    'association of public IP address requires public subnet'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        test.throws(() => {
            new autoscaling.AutoScalingGroup(stack, 'MyStack', {
                instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
                machineImage: new ec2.AmazonLinuxImage(),
                vpc,
                minCapacity: 0,
                maxCapacity: 0,
                desiredCapacity: 0,
                associatePublicIpAddress: true,
            });
        });
        test.done();
    },
    'allows disassociation of public IP address'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyStack', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            minCapacity: 0,
            maxCapacity: 0,
            desiredCapacity: 0,
            associatePublicIpAddress: false,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::LaunchConfiguration", {
            AssociatePublicIpAddress: false,
        }));
        test.done();
    },
    'does not specify public IP address association by default'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        // WHEN
        new autoscaling.AutoScalingGroup(stack, 'MyStack', {
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            vpc,
            minCapacity: 0,
            maxCapacity: 0,
            desiredCapacity: 0,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource("AWS::AutoScaling::LaunchConfiguration", (resource, errors) => {
            for (const key of Object.keys(resource)) {
                if (key === "AssociatePublicIpAddress") {
                    errors.failureReason = "Has AssociatePublicIpAddress";
                    return false;
                }
            }
            return true;
        }));
        test.done();
    },
    'an existing role can be specified instead of auto-created'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = mockVpc(stack);
        const importedRole = iam.Role.import(stack, 'ImportedRole', { roleArn: 'arn:aws:iam::123456789012:role/HelloDude' });
        // WHEN
        const asg = new autoscaling.AutoScalingGroup(stack, 'MyASG', {
            vpc,
            instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.M4, ec2.InstanceSize.Micro),
            machineImage: new ec2.AmazonLinuxImage(),
            role: importedRole
        });
        // THEN
        test.same(asg.role, importedRole);
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::InstanceProfile', {
            "Roles": ["HelloDude"]
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,
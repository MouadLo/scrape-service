"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/cdk");
const autoscaling = require("../lib");
function makeAutoScalingGroup(scope) {
    const vpc = new ec2.VpcNetwork(scope, 'VPC');
    return new autoscaling.AutoScalingGroup(scope, 'ASG', {
        vpc,
        instanceType: new ec2.InstanceType('t2.micro'),
        machineImage: new ec2.AmazonLinuxImage(),
        updateType: autoscaling.UpdateType.RollingUpdate,
    });
}
module.exports = {
    'can schedule an action'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            minCapacity: 10,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScheduledAction', {
            Recurrence: '0 8 * * *',
            MinSize: 10
        }));
        test.done();
    },
    'correctly formats date objects'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            startTime: new Date(Date.UTC(2033, 8, 10, 12, 0, 0)),
            minCapacity: 11,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::AutoScaling::ScheduledAction', {
            StartTime: '2033-09-10T12:00:00Z'
        }));
        test.done();
    },
    'autoscaling group has recommended updatepolicy for scheduled actions'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const asg = makeAutoScalingGroup(stack);
        // WHEN
        asg.scaleOnSchedule('ScaleOutInTheMorning', {
            schedule: autoscaling.Cron.dailyUtc(8),
            minCapacity: 10,
        });
        // THEN
        assert_1.expect(stack).toMatch({
            Resources: {
                ASG46ED3070: {
                    Type: "AWS::AutoScaling::AutoScalingGroup",
                    Properties: {
                        MaxSize: "1",
                        MinSize: "1",
                        DesiredCapacity: "1",
                        LaunchConfigurationName: { Ref: "ASGLaunchConfigC00AF12B" },
                        Tags: [
                            {
                                Key: "Name",
                                PropagateAtLaunch: true,
                                Value: "ASG"
                            }
                        ],
                        VPCZoneIdentifier: [
                            { Ref: "VPCPrivateSubnet1Subnet8BCA10E0" },
                            { Ref: "VPCPrivateSubnet2SubnetCFCDAA7A" },
                            { Ref: "VPCPrivateSubnet3Subnet3EDCD457" }
                        ]
                    },
                    UpdatePolicy: {
                        AutoScalingRollingUpdate: {
                            WaitOnResourceSignals: false,
                            PauseTime: "PT0S",
                            SuspendProcesses: [
                                "HealthCheck",
                                "ReplaceUnhealthy",
                                "AZRebalance",
                                "AlarmNotification",
                                "ScheduledActions"
                            ]
                        },
                        AutoScalingScheduledAction: {
                            IgnoreUnmodifiedGroupSizeProperties: true
                        }
                    },
                }
            },
        }, assert_1.MatchStyle.SUPERSET);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zY2hlZHVsZWQtYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5zY2hlZHVsZWQtYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBb0U7QUFDcEUsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUVyQyxzQ0FBdUM7QUFxR3ZDLFNBQVMsb0JBQW9CLENBQUMsS0FBb0I7SUFDaEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxPQUFPLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDcEQsR0FBRztRQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQzlDLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN4QyxVQUFVLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxhQUFhO0tBQ2pELENBQUMsQ0FBQztBQUNMLENBQUM7QUEzR0QsaUJBQVM7SUFDUCx3QkFBd0IsQ0FBQyxJQUFVO1FBQ2pDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsR0FBRyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQyxRQUFRLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUNBQW1DLEVBQUU7WUFDakUsVUFBVSxFQUFFLFdBQVc7WUFDdkIsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxnQ0FBZ0MsQ0FBQyxJQUFVO1FBQ3pDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPO1FBQ1AsR0FBRyxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsRUFBRTtZQUMxQyxRQUFRLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEQsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxtQ0FBbUMsRUFBRTtZQUNqRSxTQUFTLEVBQUUsc0JBQXNCO1NBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELHNFQUFzRSxDQUFDLElBQVU7UUFDL0UsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sR0FBRyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhDLE9BQU87UUFDUCxHQUFHLENBQUMsZUFBZSxDQUFDLHNCQUFzQixFQUFFO1lBQzFDLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDdEMsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEIsU0FBUyxFQUFFO2dCQUNULFdBQVcsRUFBRTtvQkFDWCxJQUFJLEVBQUUsb0NBQW9DO29CQUMxQyxVQUFVLEVBQUU7d0JBQ1YsT0FBTyxFQUFFLEdBQUc7d0JBQ1osT0FBTyxFQUFFLEdBQUc7d0JBQ1osZUFBZSxFQUFFLEdBQUc7d0JBQ3BCLHVCQUF1QixFQUFFLEVBQUUsR0FBRyxFQUFFLHlCQUF5QixFQUFFO3dCQUMzRCxJQUFJLEVBQUU7NEJBQ0o7Z0NBQ0UsR0FBRyxFQUFFLE1BQU07Z0NBQ1gsaUJBQWlCLEVBQUUsSUFBSTtnQ0FDdkIsS0FBSyxFQUFFLEtBQUs7NkJBQ2I7eUJBQ0Y7d0JBQ0QsaUJBQWlCLEVBQUU7NEJBQ2pCLEVBQUUsR0FBRyxFQUFFLGlDQUFpQyxFQUFFOzRCQUMxQyxFQUFFLEdBQUcsRUFBRSxpQ0FBaUMsRUFBRTs0QkFDMUMsRUFBRSxHQUFHLEVBQUUsaUNBQWlDLEVBQUU7eUJBQzNDO3FCQUNGO29CQUNELFlBQVksRUFBRTt3QkFDWix3QkFBd0IsRUFBRTs0QkFDeEIscUJBQXFCLEVBQUUsS0FBSzs0QkFDNUIsU0FBUyxFQUFFLE1BQU07NEJBQ2pCLGdCQUFnQixFQUFFO2dDQUNoQixhQUFhO2dDQUNiLGtCQUFrQjtnQ0FDbEIsYUFBYTtnQ0FDYixtQkFBbUI7Z0NBQ25CLGtCQUFrQjs2QkFDbkI7eUJBQ0Y7d0JBQ0QsMEJBQTBCLEVBQUU7NEJBQzFCLG1DQUFtQyxFQUFFLElBQUk7eUJBQzFDO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixFQUFFLG1CQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSwgTWF0Y2hTdHlsZSwgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0IGVjMiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lYzInKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgYXV0b3NjYWxpbmcgPSByZXF1aXJlKCcuLi9saWInKTtcblxuZXhwb3J0ID0ge1xuICAnY2FuIHNjaGVkdWxlIGFuIGFjdGlvbicodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgYXNnID0gbWFrZUF1dG9TY2FsaW5nR3JvdXAoc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIGFzZy5zY2FsZU9uU2NoZWR1bGUoJ1NjYWxlT3V0SW5UaGVNb3JuaW5nJywge1xuICAgICAgc2NoZWR1bGU6IGF1dG9zY2FsaW5nLkNyb24uZGFpbHlVdGMoOCksXG4gICAgICBtaW5DYXBhY2l0eTogMTAsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjaGVkdWxlZEFjdGlvbicsIHtcbiAgICAgIFJlY3VycmVuY2U6ICcwIDggKiAqIConLFxuICAgICAgTWluU2l6ZTogMTBcbiAgICB9KSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnY29ycmVjdGx5IGZvcm1hdHMgZGF0ZSBvYmplY3RzJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBhc2cgPSBtYWtlQXV0b1NjYWxpbmdHcm91cChzdGFjayk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLnNjYWxlT25TY2hlZHVsZSgnU2NhbGVPdXRJblRoZU1vcm5pbmcnLCB7XG4gICAgICBzY2hlZHVsZTogYXV0b3NjYWxpbmcuQ3Jvbi5kYWlseVV0Yyg4KSxcbiAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoRGF0ZS5VVEMoMjAzMywgOCwgMTAsIDEyLCAwLCAwKSksICAgICAgLy8gSmF2YVNjcmlwdCdzIERhdGUgaXMgYSBsaXR0bGUgc2lsbHkuXG4gICAgICBtaW5DYXBhY2l0eTogMTEsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OlNjaGVkdWxlZEFjdGlvbicsIHtcbiAgICAgIFN0YXJ0VGltZTogJzIwMzMtMDktMTBUMTI6MDA6MDBaJ1xuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdhdXRvc2NhbGluZyBncm91cCBoYXMgcmVjb21tZW5kZWQgdXBkYXRlcG9saWN5IGZvciBzY2hlZHVsZWQgYWN0aW9ucycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gICAgY29uc3QgYXNnID0gbWFrZUF1dG9TY2FsaW5nR3JvdXAoc3RhY2spO1xuXG4gICAgLy8gV0hFTlxuICAgIGFzZy5zY2FsZU9uU2NoZWR1bGUoJ1NjYWxlT3V0SW5UaGVNb3JuaW5nJywge1xuICAgICAgc2NoZWR1bGU6IGF1dG9zY2FsaW5nLkNyb24uZGFpbHlVdGMoOCksXG4gICAgICBtaW5DYXBhY2l0eTogMTAsXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50b01hdGNoKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBBU0c0NkVEMzA3MDoge1xuICAgICAgICAgIFR5cGU6IFwiQVdTOjpBdXRvU2NhbGluZzo6QXV0b1NjYWxpbmdHcm91cFwiLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIE1heFNpemU6IFwiMVwiLFxuICAgICAgICAgICAgTWluU2l6ZTogXCIxXCIsXG4gICAgICAgICAgICBEZXNpcmVkQ2FwYWNpdHk6IFwiMVwiLFxuICAgICAgICAgICAgTGF1bmNoQ29uZmlndXJhdGlvbk5hbWU6IHsgUmVmOiBcIkFTR0xhdW5jaENvbmZpZ0MwMEFGMTJCXCIgfSxcbiAgICAgICAgICAgIFRhZ3M6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIEtleTogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgUHJvcGFnYXRlQXRMYXVuY2g6IHRydWUsXG4gICAgICAgICAgICAgICAgVmFsdWU6IFwiQVNHXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFZQQ1pvbmVJZGVudGlmaWVyOiBbXG4gICAgICAgICAgICAgIHsgUmVmOiBcIlZQQ1ByaXZhdGVTdWJuZXQxU3VibmV0OEJDQTEwRTBcIiB9LFxuICAgICAgICAgICAgICB7IFJlZjogXCJWUENQcml2YXRlU3VibmV0MlN1Ym5ldENGQ0RBQTdBXCIgfSxcbiAgICAgICAgICAgICAgeyBSZWY6IFwiVlBDUHJpdmF0ZVN1Ym5ldDNTdWJuZXQzRURDRDQ1N1wiIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFVwZGF0ZVBvbGljeToge1xuICAgICAgICAgICAgQXV0b1NjYWxpbmdSb2xsaW5nVXBkYXRlOiB7XG4gICAgICAgICAgICAgIFdhaXRPblJlc291cmNlU2lnbmFsczogZmFsc2UsXG4gICAgICAgICAgICAgIFBhdXNlVGltZTogXCJQVDBTXCIsXG4gICAgICAgICAgICAgIFN1c3BlbmRQcm9jZXNzZXM6IFtcbiAgICAgICAgICAgICAgICBcIkhlYWx0aENoZWNrXCIsXG4gICAgICAgICAgICAgICAgXCJSZXBsYWNlVW5oZWFsdGh5XCIsXG4gICAgICAgICAgICAgICAgXCJBWlJlYmFsYW5jZVwiLFxuICAgICAgICAgICAgICAgIFwiQWxhcm1Ob3RpZmljYXRpb25cIixcbiAgICAgICAgICAgICAgICBcIlNjaGVkdWxlZEFjdGlvbnNcIlxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQXV0b1NjYWxpbmdTY2hlZHVsZWRBY3Rpb246IHtcbiAgICAgICAgICAgICAgSWdub3JlVW5tb2RpZmllZEdyb3VwU2l6ZVByb3BlcnRpZXM6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sIE1hdGNoU3R5bGUuU1VQRVJTRVQpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBtYWtlQXV0b1NjYWxpbmdHcm91cChzY29wZTogY2RrLkNvbnN0cnVjdCkge1xuICBjb25zdCB2cGMgPSBuZXcgZWMyLlZwY05ldHdvcmsoc2NvcGUsICdWUEMnKTtcbiAgcmV0dXJuIG5ldyBhdXRvc2NhbGluZy5BdXRvU2NhbGluZ0dyb3VwKHNjb3BlLCAnQVNHJywge1xuICAgIHZwYyxcbiAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKCksXG4gICAgdXBkYXRlVHlwZTogYXV0b3NjYWxpbmcuVXBkYXRlVHlwZS5Sb2xsaW5nVXBkYXRlLFxuICB9KTtcbn1cbiJdfQ==
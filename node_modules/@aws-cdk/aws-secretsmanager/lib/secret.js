"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const cdk_1 = require("@aws-cdk/cdk");
const rotation_schedule_1 = require("./rotation-schedule");
const secretsmanager = require("./secretsmanager.generated");
/**
 * The common behavior of Secrets. Users should not use this class directly, and instead use ``Secret``.
 */
class SecretBase extends cdk_1.Construct {
    grantRead(grantee, versionStages) {
        // @see https://docs.aws.amazon.com/fr_fr/secretsmanager/latest/userguide/auth-and-access_identity-based-policies.html
        const result = iam.Grant.addToPrincipal({
            grantee,
            actions: ['secretsmanager:GetSecretValue'],
            resourceArns: [this.secretArn],
            scope: this
        });
        if (versionStages != null && result.principalStatement) {
            result.principalStatement.addCondition('ForAnyValue:StringEquals', {
                'secretsmanager:VersionStage': versionStages
            });
        }
        if (this.encryptionKey) {
            // @see https://docs.aws.amazon.com/fr_fr/kms/latest/developerguide/services-secrets-manager.html
            this.encryptionKey.grantDecrypt(new kms.ViaServicePrincipal(`secretsmanager.${this.node.stack.region}.amazonaws.com`, grantee.grantPrincipal));
        }
        return result;
    }
    get secretValue() {
        return this.secretJsonValue('');
    }
    secretJsonValue(jsonField) {
        return cdk_1.SecretValue.secretsManager(this.secretArn, { jsonField });
    }
    addRotationSchedule(id, options) {
        return new rotation_schedule_1.RotationSchedule(this, id, Object.assign({ secret: this }, options));
    }
}
exports.SecretBase = SecretBase;
/**
 * Creates a new secret in AWS SecretsManager.
 */
class Secret extends SecretBase {
    /**
     * Import an existing secret into the Stack.
     *
     * @param scope the scope of the import.
     * @param id    the ID of the imported Secret in the construct tree.
     * @param props the attributes of the imported secret.
     */
    static import(scope, id, props) {
        return new ImportedSecret(scope, id, props);
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        if (props.generateSecretString &&
            (props.generateSecretString.secretStringTemplate || props.generateSecretString.generateStringKey) &&
            !(props.generateSecretString.secretStringTemplate && props.generateSecretString.generateStringKey)) {
            throw new Error('`secretStringTemplate` and `generateStringKey` must be specified together.');
        }
        const resource = new secretsmanager.CfnSecret(this, 'Resource', {
            description: props.description,
            kmsKeyId: props.encryptionKey && props.encryptionKey.keyArn,
            generateSecretString: props.generateSecretString || {},
            name: props.name,
        });
        this.encryptionKey = props.encryptionKey;
        this.secretArn = resource.secretArn;
    }
    /**
     * Adds a target attachment to the secret.
     *
     * @returns an AttachedSecret
     */
    addTargetAttachment(id, options) {
        return new AttachedSecret(this, id, Object.assign({ secret: this }, options));
    }
    export() {
        return {
            encryptionKey: this.encryptionKey,
            secretArn: this.secretArn,
        };
    }
}
exports.Secret = Secret;
/**
 * The type of service or database that's being associated with the secret.
 */
var AttachmentTargetType;
(function (AttachmentTargetType) {
    /**
     * A database instance
     */
    AttachmentTargetType["Instance"] = "AWS::RDS::DBInstance";
    /**
     * A database cluster
     */
    AttachmentTargetType["Cluster"] = "AWS::RDS::DBCluster";
})(AttachmentTargetType = exports.AttachmentTargetType || (exports.AttachmentTargetType = {}));
/**
 * An attached secret.
 */
class AttachedSecret extends SecretBase {
    constructor(scope, id, props) {
        super(scope, id);
        const attachment = new secretsmanager.CfnSecretTargetAttachment(this, 'Resource', {
            secretId: props.secret.secretArn,
            targetId: props.target.asSecretAttachmentTarget().targetId,
            targetType: props.target.asSecretAttachmentTarget().targetType
        });
        this.encryptionKey = props.secret.encryptionKey;
        // This allows to reference the secret after attachment (dependency).
        this.secretArn = attachment.secretTargetAttachmentSecretArn;
    }
    export() {
        return {
            encryptionKey: this.encryptionKey,
            secretArn: this.secretArn,
        };
    }
}
exports.AttachedSecret = AttachedSecret;
class ImportedSecret extends SecretBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.encryptionKey = props.encryptionKey;
        this.secretArn = props.secretArn;
    }
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,
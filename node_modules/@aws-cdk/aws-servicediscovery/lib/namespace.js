"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
var NamespaceType;
(function (NamespaceType) {
    /**
     * Choose this option if you want your application to use only API calls to discover registered instances.
     */
    NamespaceType["Http"] = "HTTP";
    /**
     * Choose this option if you want your application to be able to discover instances using either API calls or using
     * DNS queries in a VPC.
     */
    NamespaceType["DnsPrivate"] = "DNS_PRIVATE";
    /**
     * Choose this option if you want your application to be able to discover instances using either API calls or using
     * public DNS queries. You aren't required to use both methods.
     */
    NamespaceType["DnsPublic"] = "DNS_PUBLIC";
})(NamespaceType = exports.NamespaceType || (exports.NamespaceType = {}));
class NamespaceBase extends cdk.Construct {
    export() {
        return {
            namespaceName: new cdk.CfnOutput(this, 'NamespaceName', { value: this.namespaceArn }).makeImportValue().toString(),
            namespaceArn: new cdk.CfnOutput(this, 'NamespaceArn', { value: this.namespaceArn }).makeImportValue().toString(),
            namespaceId: new cdk.CfnOutput(this, 'NamespaceId', { value: this.namespaceId }).makeImportValue().toString(),
            type: this.type,
        };
    }
}
exports.NamespaceBase = NamespaceBase;
// The class below exists purely so that users can still type Namespace.import().
// It does not make sense to have HttpNamespace.import({ ..., type: NamespaceType.PublicDns }),
// but at the same time ecs.Cluster wants a type-generic export()/import(). Hence, we put
// it in Namespace.
/**
 * Static Namespace class
 */
class Namespace {
    /**
     * Import a namespace
     */
    static import(scope, id, props) {
        return new ImportedNamespace(scope, id, props);
    }
    constructor() {
    }
}
exports.Namespace = Namespace;
class ImportedNamespace extends NamespaceBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.namespaceId = props.namespaceId;
        this.namespaceArn = props.namespaceArn;
        this.namespaceName = props.namespaceName;
        this.type = props.type;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmFtZXNwYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0NBQXFDO0FBaUVyQyxJQUFZLGFBaUJYO0FBakJELFdBQVksYUFBYTtJQUN2Qjs7T0FFRztJQUNILDhCQUFhLENBQUE7SUFFYjs7O09BR0c7SUFDSCwyQ0FBMEIsQ0FBQTtJQUUxQjs7O09BR0c7SUFDSCx5Q0FBd0IsQ0FBQTtBQUMxQixDQUFDLEVBakJXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBaUJ4QjtBQUVELE1BQXNCLGFBQWMsU0FBUSxHQUFHLENBQUMsU0FBUztJQU1oRCxNQUFNO1FBQ1gsT0FBTztZQUNMLGFBQWEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDbEgsWUFBWSxFQUFFLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNoSCxXQUFXLEVBQUUsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQzdHLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNoQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBZEQsc0NBY0M7QUFFRCxpRkFBaUY7QUFDakYsK0ZBQStGO0FBQy9GLHlGQUF5RjtBQUN6RixtQkFBbUI7QUFFbkI7O0dBRUc7QUFDSCxNQUFhLFNBQVM7SUFDcEI7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQTJCO1FBQ2hGLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDtJQUNBLENBQUM7Q0FDRjtBQVZELDhCQVVDO0FBRUQsTUFBTSxpQkFBa0IsU0FBUSxhQUFhO0lBTTNDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkI7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElOYW1lc3BhY2UgZXh0ZW5kcyBjZGsuSUNvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBBIG5hbWUgZm9yIHRoZSBOYW1lc3BhY2UuXG4gICAqL1xuICByZWFkb25seSBuYW1lc3BhY2VOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWVzcGFjZSBJZCBmb3IgdGhlIE5hbWVzcGFjZS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWVzcGFjZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWVzcGFjZSBBUk4gZm9yIHRoZSBOYW1lc3BhY2UuXG4gICAqL1xuICByZWFkb25seSBuYW1lc3BhY2VBcm46IHN0cmluZztcblxuICAvKipcbiAgICogVHlwZSBvZiBOYW1lc3BhY2VcbiAgICovXG4gIHJlYWRvbmx5IHR5cGU6IE5hbWVzcGFjZVR5cGU7XG5cbiAgLyoqXG4gICAqIEV4cG9ydCB0aGUgbmFtZXNwYWNlIHByb3BlcnRpZXNcbiAgICovXG4gIGV4cG9ydCgpOiBOYW1lc3BhY2VJbXBvcnRQcm9wcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlTmFtZXNwYWNlUHJvcHMge1xuICAvKipcbiAgICogQSBuYW1lIGZvciB0aGUgTmFtZXNwYWNlLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBOYW1lc3BhY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVzcGFjZUltcG9ydFByb3BzIHtcbiAgLyoqXG4gICAqIEEgbmFtZSBmb3IgdGhlIE5hbWVzcGFjZS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWVzcGFjZU5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZXNwYWNlIElkIGZvciB0aGUgTmFtZXNwYWNlLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZXNwYWNlSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZXNwYWNlIEFSTiBmb3IgdGhlIE5hbWVzcGFjZS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWVzcGFjZUFybjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUeXBlIG9mIE5hbWVzcGFjZS4gVmFsaWQgdmFsdWVzOiBIVFRQLCBETlNfUFVCTElDLCBvciBETlNfUFJJVkFURVxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogTmFtZXNwYWNlVHlwZTtcbn1cblxuZXhwb3J0IGVudW0gTmFtZXNwYWNlVHlwZSB7XG4gIC8qKlxuICAgKiBDaG9vc2UgdGhpcyBvcHRpb24gaWYgeW91IHdhbnQgeW91ciBhcHBsaWNhdGlvbiB0byB1c2Ugb25seSBBUEkgY2FsbHMgdG8gZGlzY292ZXIgcmVnaXN0ZXJlZCBpbnN0YW5jZXMuXG4gICAqL1xuICBIdHRwID0gXCJIVFRQXCIsXG5cbiAgLyoqXG4gICAqIENob29zZSB0aGlzIG9wdGlvbiBpZiB5b3Ugd2FudCB5b3VyIGFwcGxpY2F0aW9uIHRvIGJlIGFibGUgdG8gZGlzY292ZXIgaW5zdGFuY2VzIHVzaW5nIGVpdGhlciBBUEkgY2FsbHMgb3IgdXNpbmdcbiAgICogRE5TIHF1ZXJpZXMgaW4gYSBWUEMuXG4gICAqL1xuICBEbnNQcml2YXRlID0gXCJETlNfUFJJVkFURVwiLFxuXG4gIC8qKlxuICAgKiBDaG9vc2UgdGhpcyBvcHRpb24gaWYgeW91IHdhbnQgeW91ciBhcHBsaWNhdGlvbiB0byBiZSBhYmxlIHRvIGRpc2NvdmVyIGluc3RhbmNlcyB1c2luZyBlaXRoZXIgQVBJIGNhbGxzIG9yIHVzaW5nXG4gICAqIHB1YmxpYyBETlMgcXVlcmllcy4gWW91IGFyZW4ndCByZXF1aXJlZCB0byB1c2UgYm90aCBtZXRob2RzLlxuICAgKi9cbiAgRG5zUHVibGljID0gXCJETlNfUFVCTElDXCIsXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOYW1lc3BhY2VCYXNlIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIElOYW1lc3BhY2Uge1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbmFtZXNwYWNlSWQ6IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IG5hbWVzcGFjZUFybjogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbmFtZXNwYWNlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogTmFtZXNwYWNlVHlwZTtcblxuICBwdWJsaWMgZXhwb3J0KCk6IE5hbWVzcGFjZUltcG9ydFByb3BzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZXNwYWNlTmFtZTogbmV3IGNkay5DZm5PdXRwdXQodGhpcywgJ05hbWVzcGFjZU5hbWUnLCB7IHZhbHVlOiB0aGlzLm5hbWVzcGFjZUFybiB9KS5tYWtlSW1wb3J0VmFsdWUoKS50b1N0cmluZygpLFxuICAgICAgbmFtZXNwYWNlQXJuOiBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnTmFtZXNwYWNlQXJuJywgeyB2YWx1ZTogdGhpcy5uYW1lc3BhY2VBcm4gfSkubWFrZUltcG9ydFZhbHVlKCkudG9TdHJpbmcoKSxcbiAgICAgIG5hbWVzcGFjZUlkOiBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCAnTmFtZXNwYWNlSWQnLCB7IHZhbHVlOiB0aGlzLm5hbWVzcGFjZUlkIH0pLm1ha2VJbXBvcnRWYWx1ZSgpLnRvU3RyaW5nKCksXG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgfTtcbiAgfVxufVxuXG4vLyBUaGUgY2xhc3MgYmVsb3cgZXhpc3RzIHB1cmVseSBzbyB0aGF0IHVzZXJzIGNhbiBzdGlsbCB0eXBlIE5hbWVzcGFjZS5pbXBvcnQoKS5cbi8vIEl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgdG8gaGF2ZSBIdHRwTmFtZXNwYWNlLmltcG9ydCh7IC4uLiwgdHlwZTogTmFtZXNwYWNlVHlwZS5QdWJsaWNEbnMgfSksXG4vLyBidXQgYXQgdGhlIHNhbWUgdGltZSBlY3MuQ2x1c3RlciB3YW50cyBhIHR5cGUtZ2VuZXJpYyBleHBvcnQoKS9pbXBvcnQoKS4gSGVuY2UsIHdlIHB1dFxuLy8gaXQgaW4gTmFtZXNwYWNlLlxuXG4vKipcbiAqIFN0YXRpYyBOYW1lc3BhY2UgY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIE5hbWVzcGFjZSB7XG4gIC8qKlxuICAgKiBJbXBvcnQgYSBuYW1lc3BhY2VcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaW1wb3J0KHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmFtZXNwYWNlSW1wb3J0UHJvcHMpOiBJTmFtZXNwYWNlIHtcbiAgICByZXR1cm4gbmV3IEltcG9ydGVkTmFtZXNwYWNlKHNjb3BlLCBpZCwgcHJvcHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgfVxufVxuXG5jbGFzcyBJbXBvcnRlZE5hbWVzcGFjZSBleHRlbmRzIE5hbWVzcGFjZUJhc2Uge1xuICBwdWJsaWMgbmFtZXNwYWNlSWQ6IHN0cmluZztcbiAgcHVibGljIG5hbWVzcGFjZUFybjogc3RyaW5nO1xuICBwdWJsaWMgbmFtZXNwYWNlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgdHlwZTogTmFtZXNwYWNlVHlwZTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5hbWVzcGFjZUltcG9ydFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcbiAgICB0aGlzLm5hbWVzcGFjZUlkID0gcHJvcHMubmFtZXNwYWNlSWQ7XG4gICAgdGhpcy5uYW1lc3BhY2VBcm4gPSBwcm9wcy5uYW1lc3BhY2VBcm47XG4gICAgdGhpcy5uYW1lc3BhY2VOYW1lID0gcHJvcHMubmFtZXNwYWNlTmFtZTtcbiAgICB0aGlzLnR5cGUgPSBwcm9wcy50eXBlO1xuICB9XG59Il19
"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const cdk_1 = require("@aws-cdk/cdk");
const dns_validated_certificate_1 = require("../lib/dns-validated-certificate");
module.exports = {
    'creates CloudFormation Custom Resource'(test) {
        const stack = new cdk_1.Stack();
        const exampleDotComZone = new aws_route53_1.PublicHostedZone(stack, 'ExampleDotCom', {
            zoneName: 'example.com'
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            hostedZone: exampleDotComZone,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
            DomainName: 'test.example.com',
            ServiceToken: {
                'Fn::GetAtt': [
                    'CertificateCertificateRequestorFunction5E845413',
                    'Arn'
                ]
            },
            HostedZoneId: {
                Ref: 'ExampleDotCom4D1B83AA',
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            Handler: 'index.certificateRequestHandler',
            Runtime: 'nodejs8.10',
            Timeout: 900,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyName: 'CertificateCertificateRequestorFunctionServiceRoleDefaultPolicy3C8845BC',
            Roles: [
                {
                    Ref: 'CertificateCertificateRequestorFunctionServiceRoleC04C13DA',
                }
            ],
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: [
                            'acm:RequestCertificate',
                            'acm:DescribeCertificate',
                            'acm:DeleteCertificate'
                        ],
                        Effect: 'Allow',
                        Resource: '*'
                    },
                    {
                        Action: 'route53:GetChange',
                        Effect: 'Allow',
                        Resource: '*'
                    },
                    {
                        Action: 'route53:changeResourceRecordSets',
                        Effect: 'Allow',
                        Resource: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:aws:route53:::hostedzone/',
                                    {
                                        Ref: 'ExampleDotCom4D1B83AA'
                                    }
                                ]
                            ]
                        }
                    },
                ],
            }
        }));
        test.done();
    },
    'export and import'(test) {
        const stack = new cdk_1.Stack();
        const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
            zoneName: 'hello.com'
        });
        const refProps = new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'hello.com',
            hostedZone: helloDotComZone,
        }).export();
        test.ok('certificateArn' in refProps);
        test.done();
    },
    'adds validation error on domain mismatch'(test) {
        const stack = new cdk_1.Stack();
        const helloDotComZone = new aws_route53_1.PublicHostedZone(stack, 'HelloDotCom', {
            zoneName: 'hello.com'
        });
        new dns_validated_certificate_1.DnsValidatedCertificate(stack, 'Cert', {
            domainName: 'example.com',
            hostedZone: helloDotComZone,
        });
        // a bit of a hack: expect(stack) will trigger validation.
        test.throws(() => assert_1.expect(stack), /DNS zone hello.com is not authoritative for certificate domain name example.com/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5kbnMtdmFsaWRhdGVkLWNlcnRpZmljYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5kbnMtdmFsaWRhdGVkLWNlcnRpZmljYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBdUQ7QUFDdkQsc0RBQXdEO0FBQ3hELHNDQUFxQztBQUVyQyxnRkFBMkU7QUFFM0UsaUJBQVM7SUFDUCx3Q0FBd0MsQ0FBQyxJQUFVO1FBQ2pELE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFFMUIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLDhCQUFnQixDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7WUFDckUsUUFBUSxFQUFFLGFBQWE7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxtREFBdUIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO1lBQ2hELFVBQVUsRUFBRSxrQkFBa0I7WUFDOUIsVUFBVSxFQUFFLGlCQUFpQjtTQUM5QixDQUFDLENBQUM7UUFFSCxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMscUNBQXFDLEVBQUU7WUFDbkUsVUFBVSxFQUFFLGtCQUFrQjtZQUM5QixZQUFZLEVBQUU7Z0JBQ1osWUFBWSxFQUFFO29CQUNaLGlEQUFpRDtvQkFDakQsS0FBSztpQkFDTjthQUNGO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLEdBQUcsRUFBRSx1QkFBdUI7YUFDN0I7U0FDRixDQUFDLENBQUMsQ0FBQztRQUNKLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyx1QkFBdUIsRUFBRTtZQUNyRCxPQUFPLEVBQUUsaUNBQWlDO1lBQzFDLE9BQU8sRUFBRSxZQUFZO1lBQ3JCLE9BQU8sRUFBRSxHQUFHO1NBQ2IsQ0FBQyxDQUFDLENBQUM7UUFDSixlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsa0JBQWtCLEVBQUU7WUFDaEQsVUFBVSxFQUFFLHlFQUF5RTtZQUNyRixLQUFLLEVBQUU7Z0JBQ0w7b0JBQ0UsR0FBRyxFQUFFLDREQUE0RDtpQkFDbEU7YUFDRjtZQUNELGNBQWMsRUFBRTtnQkFDZCxPQUFPLEVBQUUsWUFBWTtnQkFDckIsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE1BQU0sRUFBRTs0QkFDTix3QkFBd0I7NEJBQ3hCLHlCQUF5Qjs0QkFDekIsdUJBQXVCO3lCQUN4Qjt3QkFDRCxNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUUsR0FBRztxQkFDZDtvQkFDRDt3QkFDRSxNQUFNLEVBQUUsbUJBQW1CO3dCQUMzQixNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUUsR0FBRztxQkFDZDtvQkFDRDt3QkFDRSxNQUFNLEVBQUUsa0NBQWtDO3dCQUMxQyxNQUFNLEVBQUUsT0FBTzt3QkFDZixRQUFRLEVBQUU7NEJBQ1IsVUFBVSxFQUFFO2dDQUNWLEVBQUU7Z0NBQ0Y7b0NBQ0UsK0JBQStCO29DQUMvQjt3Q0FDRSxHQUFHLEVBQUUsdUJBQXVCO3FDQUM3QjtpQ0FDRjs2QkFDRjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBVTtRQUM1QixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBRTFCLE1BQU0sZUFBZSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUNqRSxRQUFRLEVBQUUsV0FBVztTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLG1EQUF1QixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7WUFDMUQsVUFBVSxFQUFFLFdBQVc7WUFDdkIsVUFBVSxFQUFFLGVBQWU7U0FDNUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRVosSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsSUFBSSxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsMENBQTBDLENBQUMsSUFBVTtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBRTFCLE1BQU0sZUFBZSxHQUFHLElBQUksOEJBQWdCLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUNqRSxRQUFRLEVBQUUsV0FBVztTQUN0QixDQUFDLENBQUM7UUFFSCxJQUFJLG1EQUF1QixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7WUFDekMsVUFBVSxFQUFFLGFBQWE7WUFDekIsVUFBVSxFQUFFLGVBQWU7U0FDNUIsQ0FBQyxDQUFDO1FBRUgsMERBQTBEO1FBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLGlGQUFpRixDQUFDLENBQUM7UUFDcEgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgeyBQdWJsaWNIb3N0ZWRab25lIH0gZnJvbSAnQGF3cy1jZGsvYXdzLXJvdXRlNTMnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jZGsnO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IERuc1ZhbGlkYXRlZENlcnRpZmljYXRlIH0gZnJvbSAnLi4vbGliL2Rucy12YWxpZGF0ZWQtY2VydGlmaWNhdGUnO1xuXG5leHBvcnQgPSB7XG4gICdjcmVhdGVzIENsb3VkRm9ybWF0aW9uIEN1c3RvbSBSZXNvdXJjZScodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICBjb25zdCBleGFtcGxlRG90Q29tWm9uZSA9IG5ldyBQdWJsaWNIb3N0ZWRab25lKHN0YWNrLCAnRXhhbXBsZURvdENvbScsIHtcbiAgICAgIHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nXG4gICAgfSk7XG5cbiAgICBuZXcgRG5zVmFsaWRhdGVkQ2VydGlmaWNhdGUoc3RhY2ssICdDZXJ0aWZpY2F0ZScsIHtcbiAgICAgIGRvbWFpbk5hbWU6ICd0ZXN0LmV4YW1wbGUuY29tJyxcbiAgICAgIGhvc3RlZFpvbmU6IGV4YW1wbGVEb3RDb21ab25lLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6Q2xvdWRGb3JtYXRpb246OkN1c3RvbVJlc291cmNlJywge1xuICAgICAgRG9tYWluTmFtZTogJ3Rlc3QuZXhhbXBsZS5jb20nLFxuICAgICAgU2VydmljZVRva2VuOiB7XG4gICAgICAgICdGbjo6R2V0QXR0JzogW1xuICAgICAgICAgICdDZXJ0aWZpY2F0ZUNlcnRpZmljYXRlUmVxdWVzdG9yRnVuY3Rpb241RTg0NTQxMycsXG4gICAgICAgICAgJ0FybidcbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIEhvc3RlZFpvbmVJZDoge1xuICAgICAgICBSZWY6ICdFeGFtcGxlRG90Q29tNEQxQjgzQUEnLFxuICAgICAgfVxuICAgIH0pKTtcbiAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywge1xuICAgICAgSGFuZGxlcjogJ2luZGV4LmNlcnRpZmljYXRlUmVxdWVzdEhhbmRsZXInLFxuICAgICAgUnVudGltZTogJ25vZGVqczguMTAnLFxuICAgICAgVGltZW91dDogOTAwLFxuICAgIH0pKTtcbiAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgIFBvbGljeU5hbWU6ICdDZXJ0aWZpY2F0ZUNlcnRpZmljYXRlUmVxdWVzdG9yRnVuY3Rpb25TZXJ2aWNlUm9sZURlZmF1bHRQb2xpY3kzQzg4NDVCQycsXG4gICAgICBSb2xlczogW1xuICAgICAgICB7XG4gICAgICAgICAgUmVmOiAnQ2VydGlmaWNhdGVDZXJ0aWZpY2F0ZVJlcXVlc3RvckZ1bmN0aW9uU2VydmljZVJvbGVDMDRDMTNEQScsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgICAnYWNtOlJlcXVlc3RDZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgICAgICdhY206RGVzY3JpYmVDZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgICAgICdhY206RGVsZXRlQ2VydGlmaWNhdGUnXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiAncm91dGU1MzpHZXRDaGFuZ2UnLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6ICcqJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgQWN0aW9uOiAncm91dGU1MzpjaGFuZ2VSZXNvdXJjZVJlY29yZFNldHMnLFxuICAgICAgICAgICAgRWZmZWN0OiAnQWxsb3cnLFxuICAgICAgICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgJ0ZuOjpKb2luJzogW1xuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICdhcm46YXdzOnJvdXRlNTM6Ojpob3N0ZWR6b25lLycsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFJlZjogJ0V4YW1wbGVEb3RDb200RDFCODNBQSdcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdleHBvcnQgYW5kIGltcG9ydCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICBjb25zdCBoZWxsb0RvdENvbVpvbmUgPSBuZXcgUHVibGljSG9zdGVkWm9uZShzdGFjaywgJ0hlbGxvRG90Q29tJywge1xuICAgICAgem9uZU5hbWU6ICdoZWxsby5jb20nXG4gICAgfSk7XG5cbiAgICBjb25zdCByZWZQcm9wcyA9IG5ldyBEbnNWYWxpZGF0ZWRDZXJ0aWZpY2F0ZShzdGFjaywgJ0NlcnQnLCB7XG4gICAgICBkb21haW5OYW1lOiAnaGVsbG8uY29tJyxcbiAgICAgIGhvc3RlZFpvbmU6IGhlbGxvRG90Q29tWm9uZSxcbiAgICB9KS5leHBvcnQoKTtcblxuICAgIHRlc3Qub2soJ2NlcnRpZmljYXRlQXJuJyBpbiByZWZQcm9wcyk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2FkZHMgdmFsaWRhdGlvbiBlcnJvciBvbiBkb21haW4gbWlzbWF0Y2gnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gICAgY29uc3QgaGVsbG9Eb3RDb21ab25lID0gbmV3IFB1YmxpY0hvc3RlZFpvbmUoc3RhY2ssICdIZWxsb0RvdENvbScsIHtcbiAgICAgIHpvbmVOYW1lOiAnaGVsbG8uY29tJ1xuICAgIH0pO1xuXG4gICAgbmV3IERuc1ZhbGlkYXRlZENlcnRpZmljYXRlKHN0YWNrLCAnQ2VydCcsIHtcbiAgICAgIGRvbWFpbk5hbWU6ICdleGFtcGxlLmNvbScsXG4gICAgICBob3N0ZWRab25lOiBoZWxsb0RvdENvbVpvbmUsXG4gICAgfSk7XG5cbiAgICAvLyBhIGJpdCBvZiBhIGhhY2s6IGV4cGVjdChzdGFjaykgd2lsbCB0cmlnZ2VyIHZhbGlkYXRpb24uXG4gICAgdGVzdC50aHJvd3MoKCkgPT4gZXhwZWN0KHN0YWNrKSwgL0ROUyB6b25lIGhlbGxvLmNvbSBpcyBub3QgYXV0aG9yaXRhdGl2ZSBmb3IgY2VydGlmaWNhdGUgZG9tYWluIG5hbWUgZXhhbXBsZS5jb20vKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG4iXX0=
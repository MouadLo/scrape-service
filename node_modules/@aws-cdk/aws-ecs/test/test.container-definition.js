"use strict";
const assert_1 = require("@aws-cdk/assert");
const secretsmanager = require("@aws-cdk/aws-secretsmanager");
const cdk = require("@aws-cdk/cdk");
const ecs = require("../lib");
module.exports = {
    "When creating a Task Definition": {
        // Validating portMapping inputs
        "With network mode AwsVpc": {
            "Host port should be the same as container port"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.AwsVpc,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // THEN
                test.throws(() => {
                    container.addPortMappings({
                        containerPort: 8080,
                        hostPort: 8081
                    });
                });
                test.done();
            },
            "Host port can be empty "(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.AwsVpc,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8080,
                });
                // THEN no exception raised
                test.done();
            },
        },
        "With network mode Host ": {
            "Host port should be the same as container port"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Host,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // THEN
                test.throws(() => {
                    container.addPortMappings({
                        containerPort: 8080,
                        hostPort: 8081
                    });
                });
                test.done();
            },
            "Host port can be empty "(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Host,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8080,
                });
                // THEN no exception raised
                test.done();
            },
            "errors when adding links"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Host,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                const logger = taskDefinition.addContainer("LoggingContainer", {
                    image: ecs.ContainerImage.fromRegistry("myLogger"),
                    memoryLimitMiB: 1024,
                });
                // THEN
                test.throws(() => {
                    container.addLink(logger);
                });
                test.done();
            },
        },
        "With network mode Bridge": {
            "allows adding links"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Bridge,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                const logger = taskDefinition.addContainer("LoggingContainer", {
                    image: ecs.ContainerImage.fromRegistry("myLogger"),
                    memoryLimitMiB: 1024,
                });
                // THEN
                container.addLink(logger);
                test.done();
            },
        }
    },
    "Ingress Port": {
        "With network mode AwsVpc": {
            "Ingress port should be the same as container port"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.AwsVpc,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8080,
                });
                const actual = container.ingressPort;
                // THEN
                const expected = 8080;
                test.equal(actual, expected, "Ingress port should be the same as container port");
                test.done();
            },
        },
        "With network mode Host ": {
            "Ingress port should be the same as container port"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Host,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8080,
                });
                const actual = container.ingressPort;
                // THEN
                const expected = 8080;
                test.equal(actual, expected);
                test.done();
            },
        },
        "With network mode Bridge": {
            "Ingress port should be the same as host port if supplied"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Bridge,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8080,
                    hostPort: 8081,
                });
                const actual = container.ingressPort;
                // THEN
                const expected = 8081;
                test.equal(actual, expected);
                test.done();
            },
            "Ingress port should be 0 if not supplied"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {
                    networkMode: ecs.NetworkMode.Bridge,
                });
                const container = taskDefinition.addContainer("Container", {
                    image: ecs.ContainerImage.fromRegistry("/aws/aws-example-app"),
                    memoryLimitMiB: 2048,
                });
                // WHEN
                container.addPortMappings({
                    containerPort: 8081,
                });
                const actual = container.ingressPort;
                // THEN
                const expected = 0;
                test.equal(actual, expected);
                test.done();
            },
        },
    },
    'can add environment variables to the container definition'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
        // WHEN
        taskDefinition.addContainer('cont', {
            image: ecs.ContainerImage.fromRegistry('test'),
            memoryLimitMiB: 1024,
            environment: {
                TEST_ENVIRONMENT_VARIABLE: "test environment variable value"
            }
        });
        // THEN
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [{
                            Name: "TEST_ENVIRONMENT_VARIABLE",
                            Value: "test environment variable value"
                        }]
                }
            ]
        }));
        test.done();
    },
    'can add AWS logging to container definition'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
        // WHEN
        taskDefinition.addContainer('cont', {
            image: ecs.ContainerImage.fromRegistry('test'),
            memoryLimitMiB: 1024,
            logging: new ecs.AwsLogDriver(stack, 'Logging', { streamPrefix: 'prefix' })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": { Ref: "LoggingLogGroupC6B8E20B" },
                            "awslogs-stream-prefix": "prefix",
                            "awslogs-region": { Ref: "AWS::Region" }
                        }
                    },
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: ["logs:CreateLogStream", "logs:PutLogEvents"],
                        Effect: "Allow",
                        Resource: { "Fn::GetAtt": ["LoggingLogGroupC6B8E20B", "Arn"] }
                    }
                ],
                Version: "2012-10-17"
            }
        }));
        test.done();
    },
    'can set Health Check with defaults'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
        const hcCommand = "curl localhost:8000";
        // WHEN
        taskDefinition.addContainer('cont', {
            image: ecs.ContainerImage.fromRegistry('test'),
            memoryLimitMiB: 1024,
            healthCheck: {
                command: [hcCommand]
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    HealthCheck: {
                        Command: ["CMD-SHELL", hcCommand],
                        Interval: 30,
                        Retries: 3,
                        Timeout: 5
                    },
                }
            ]
        }));
        test.done();
    },
    'can specify Health Check values'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
        const hcCommand = "curl localhost:8000";
        // WHEN
        taskDefinition.addContainer('cont', {
            image: ecs.ContainerImage.fromRegistry('test'),
            memoryLimitMiB: 1024,
            healthCheck: {
                command: [hcCommand],
                intervalSeconds: 20,
                retries: 5,
                startPeriod: 10
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    HealthCheck: {
                        Command: ["CMD-SHELL", hcCommand],
                        Interval: 20,
                        Retries: 5,
                        Timeout: 5,
                        StartPeriod: 10
                    },
                }
            ]
        }));
        test.done();
    },
    'can specify private registry credentials'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
        const mySecretArn = 'arn:aws:secretsmanager:region:1234567890:secret:MyRepoSecret-6f8hj3';
        const repoCreds = secretsmanager.Secret.import(stack, 'MyRepoSecret', {
            secretArn: mySecretArn,
        });
        // WHEN
        taskDefinition.addContainer('Container', {
            image: ecs.ContainerImage.fromRegistry('user-x/my-app', {
                credentials: repoCreds
            }),
            memoryLimitMiB: 2048,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Image: 'user-x/my-app',
                    RepositoryCredentials: {
                        CredentialsParameter: mySecretArn
                    },
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: "secretsmanager:GetSecretValue",
                        Effect: "Allow",
                        Resource: mySecretArn
                    }
                ]
            }
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,
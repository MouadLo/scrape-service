"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_certificatemanager_1 = require("@aws-cdk/aws-certificatemanager");
const ec2 = require("@aws-cdk/aws-ec2");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const cdk = require("@aws-cdk/cdk");
const ecs = require("../lib");
module.exports = {
    'test ECS loadbalanced construct'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
        // WHEN
        new ecs.LoadBalancedEc2Service(stack, 'Service', {
            cluster,
            memoryLimitMiB: 1024,
            image: ecs.ContainerImage.fromRegistry('test'),
            desiredCount: 2,
            environment: {
                TEST_ENVIRONMENT_VARIABLE1: "test environment variable 1 value",
                TEST_ENVIRONMENT_VARIABLE2: "test environment variable 2 value"
            }
        });
        // THEN - stack containers a load balancer and a service
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::LoadBalancer'));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
            DesiredCount: 2,
            LaunchType: "EC2",
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE1",
                            Value: "test environment variable 1 value"
                        },
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE2",
                            Value: "test environment variable 2 value"
                        }
                    ],
                }
            ]
        }));
        test.done();
    },
    'test Fargate loadbalanced construct'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecs.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('test'),
            desiredCount: 2,
            environment: {
                TEST_ENVIRONMENT_VARIABLE1: "test environment variable 1 value",
                TEST_ENVIRONMENT_VARIABLE2: "test environment variable 2 value"
            }
        });
        // THEN - stack contains a load balancer and a service
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::LoadBalancer'));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE1",
                            Value: "test environment variable 1 value"
                        },
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE2",
                            Value: "test environment variable 2 value"
                        }
                    ],
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": { Ref: "ServiceLoggingLogGroupC3D6A581" },
                            "awslogs-stream-prefix": "Service",
                            "awslogs-region": { Ref: "AWS::Region" }
                        }
                    },
                }
            ]
        }));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
            DesiredCount: 2,
            LaunchType: "FARGATE",
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            Port: 80
        }));
        test.done();
    },
    'test Fargate loadbalanced construct opting out of log driver creation'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // WHEN
        new ecs.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('test'),
            desiredCount: 2,
            createLogs: false,
            environment: {
                TEST_ENVIRONMENT_VARIABLE1: "test environment variable 1 value",
                TEST_ENVIRONMENT_VARIABLE2: "test environment variable 2 value"
            }
        });
        // THEN - stack contains a load balancer and a service
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE1",
                            Value: "test environment variable 1 value"
                        },
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE2",
                            Value: "test environment variable 2 value"
                        }
                    ],
                    LogConfiguration: {
                        LogDriver: "awslogs",
                        Options: {
                            "awslogs-group": { Ref: "ServiceLoggingLogGroupC3D6A581" },
                            "awslogs-stream-prefix": "Service",
                            "awslogs-region": { Ref: "AWS::Region" }
                        }
                    },
                }
            ]
        }));
        test.done();
    },
    'test Fargateloadbalanced construct with TLS'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        const zone = new aws_route53_1.PublicHostedZone(stack, 'HostedZone', { zoneName: 'example.com' });
        // WHEN
        new ecs.LoadBalancedFargateService(stack, 'Service', {
            cluster,
            image: ecs.ContainerImage.fromRegistry('test'),
            domainName: 'api.example.com',
            domainZone: zone,
            certificate: aws_certificatemanager_1.Certificate.import(stack, 'Cert', { certificateArn: 'helloworld' })
        });
        // THEN - stack contains a load balancer and a service
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::LoadBalancer'));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            Port: 443,
            Certificates: [{
                    CertificateArn: "helloworld"
                }]
        }));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
            DesiredCount: 1,
            LaunchType: "FARGATE",
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Route53::RecordSet', {
            Name: 'api.example.com.',
            HostedZoneId: {
                Ref: "HostedZoneDB99F866"
            },
            Type: 'A',
            AliasTarget: {
                HostedZoneId: { 'Fn::GetAtt': ['ServiceLBE9A1ADBC', 'CanonicalHostedZoneID'] },
                DNSName: { 'Fn::GetAtt': ['ServiceLBE9A1ADBC', 'DNSName'] },
            }
        }));
        test.done();
    },
    "errors when setting domainName but not domainZone"(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.VpcNetwork(stack, 'VPC');
        const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
        // THEN
        test.throws(() => {
            new ecs.LoadBalancedFargateService(stack, 'Service', {
                cluster,
                image: ecs.ContainerImage.fromRegistry('test'),
                domainName: 'api.example.com'
            });
        });
        test.done();
    },
    'test Fargateloadbalanced applet'(test) {
        // WHEN
        const app = new cdk.App();
        const stack = new ecs.LoadBalancedFargateServiceApplet(app, 'Service', {
            image: 'test',
            desiredCount: 2,
            environment: {
                TEST_ENVIRONMENT_VARIABLE1: "test environment variable 1 value",
                TEST_ENVIRONMENT_VARIABLE2: "test environment variable 2 value"
            }
        });
        // THEN - stack contains a load balancer and a service
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::LoadBalancer'));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
            DesiredCount: 2,
            LaunchType: "FARGATE",
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    Environment: [
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE1",
                            Value: "test environment variable 1 value"
                        },
                        {
                            Name: "TEST_ENVIRONMENT_VARIABLE2",
                            Value: "test environment variable 2 value"
                        }
                    ],
                }
            ]
        }));
        test.done();
    },
    'test Fargateloadbalanced applet with TLS'(test) {
        // WHEN
        const app = new cdk.App();
        const stack = new ecs.LoadBalancedFargateServiceApplet(app, 'Service', {
            image: 'test',
            desiredCount: 2,
            domainName: 'api.example.com',
            domainZone: 'example.com',
            certificate: 'helloworld'
        });
        // THEN - stack contains a load balancer and a service
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::LoadBalancer'));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ElasticLoadBalancingV2::Listener', {
            Port: 443,
            Certificates: [{
                    CertificateArn: "helloworld"
                }]
        }));
        assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
            DesiredCount: 2,
            LaunchType: "FARGATE",
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Route53::RecordSet', {
            Name: 'api.example.com.',
            HostedZoneId: "/hostedzone/DUMMY",
            Type: 'A',
            AliasTarget: {
                HostedZoneId: { 'Fn::GetAtt': ['FargateServiceLBB353E155', 'CanonicalHostedZoneID'] },
                DNSName: { 'Fn::GetAtt': ['FargateServiceLBB353E155', 'DNSName'] },
            }
        }));
        test.done();
    },
    "errors when setting domainName but not domainZone on applet"(test) {
        // THEN
        test.throws(() => {
            new ecs.LoadBalancedFargateServiceApplet(new cdk.App(), 'Service', {
                image: 'test',
                domainName: 'api.example.com'
            });
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,
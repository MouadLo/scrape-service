import { ICertificate } from '@aws-cdk/aws-certificatemanager';
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import cdk = require('@aws-cdk/cdk');
import { BaseService } from './base/base-service';
import { ICluster } from './cluster';
import { ContainerImage } from './container-image';
export declare enum LoadBalancerType {
    Application = 0,
    Network = 1
}
export interface LoadBalancedServiceBaseProps {
    /**
     * The cluster where your service will be deployed
     */
    readonly cluster: ICluster;
    /**
     * The image to start.
     */
    readonly image: ContainerImage;
    /**
     * The container port of the application load balancer attached to your Fargate service. Corresponds to container port mapping.
     *
     * @default 80
     */
    readonly containerPort?: number;
    /**
     * Determines whether the Application Load Balancer will be internet-facing
     *
     * @default true
     */
    readonly publicLoadBalancer?: boolean;
    /**
     * Number of desired copies of running tasks
     *
     * @default 1
     */
    readonly desiredCount?: number;
    /**
     * Whether to create an application load balancer or a network load balancer
     * @default application
     */
    readonly loadBalancerType?: LoadBalancerType;
    /**
     * Certificate Manager certificate to associate with the load balancer.
     * Setting this option will set the load balancer port to 443.
     */
    readonly certificate?: ICertificate;
    /**
     * Environment variables to pass to the container
     *
     * @default No environment variables
     */
    readonly environment?: {
        [key: string]: string;
    };
}
/**
 * Base class for load-balanced Fargate and ECS service
 */
export declare abstract class LoadBalancedServiceBase extends cdk.Construct {
    readonly loadBalancerType: LoadBalancerType;
    readonly loadBalancer: elbv2.BaseLoadBalancer;
    readonly listener: elbv2.ApplicationListener | elbv2.NetworkListener;
    readonly targetGroup: elbv2.ApplicationTargetGroup | elbv2.NetworkTargetGroup;
    constructor(scope: cdk.Construct, id: string, props: LoadBalancedServiceBaseProps);
    protected addServiceAsTarget(service: BaseService): void;
}

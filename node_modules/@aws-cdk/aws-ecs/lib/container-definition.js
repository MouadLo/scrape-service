"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const task_definition_1 = require("./base/task-definition");
const linux_parameters_1 = require("./linux-parameters");
/**
 * A definition for a single container in a Task
 */
class ContainerDefinition extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        /**
         * Access Linux Parameters
         */
        this.linuxParameters = new linux_parameters_1.LinuxParameters();
        /**
         * The configured mount points
         */
        this.mountPoints = new Array();
        /**
         * The configured port mappings
         */
        this.portMappings = new Array();
        /**
         * The configured volumes
         */
        this.volumesFrom = new Array();
        /**
         * The configured ulimits
         */
        this.ulimits = new Array();
        /**
         * The configured container links
         */
        this.links = new Array();
        this.essential = props.essential !== undefined ? props.essential : true;
        this.taskDefinition = props.taskDefinition;
        this.memoryLimitSpecified = props.memoryLimitMiB !== undefined || props.memoryReservationMiB !== undefined;
        props.image.bind(this);
        if (props.logging) {
            props.logging.bind(this);
        }
        props.taskDefinition._linkContainer(this);
    }
    /**
     * Add a link from this container to a different container
     * The link parameter allows containers to communicate with each other without the need for port mappings.
     * Only supported if the network mode of a task definition is set to bridge.
     * Warning: The --link flag is a legacy feature of Docker. It may eventually be removed.
     */
    addLink(container, alias) {
        if (this.taskDefinition.networkMode !== task_definition_1.NetworkMode.Bridge) {
            throw new Error(`You must use network mode Bridge to add container links.`);
        }
        if (alias !== undefined) {
            this.links.push(`${container.node.id}:${alias}`);
        }
        else {
            this.links.push(`${container.node.id}`);
        }
    }
    /**
     * Add one or more mount points to this container.
     */
    addMountPoints(...mountPoints) {
        this.mountPoints.push(...mountPoints);
    }
    /**
     * Mount temporary disc space to a container.
     * This adds the correct container mountPoint and task definition volume.
     */
    addScratch(scratch) {
        const mountPoint = {
            containerPath: scratch.containerPath,
            readOnly: scratch.readOnly,
            sourceVolume: scratch.name
        };
        const volume = {
            host: {
                sourcePath: scratch.sourcePath
            },
            name: scratch.name
        };
        this.taskDefinition.addVolume(volume);
        this.addMountPoints(mountPoint);
    }
    /**
     * Add one or more port mappings to this container
     */
    addPortMappings(...portMappings) {
        this.portMappings.push(...portMappings.map(pm => {
            if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.AwsVpc || this.taskDefinition.networkMode === task_definition_1.NetworkMode.Host) {
                if (pm.containerPort !== pm.hostPort && pm.hostPort !== undefined) {
                    throw new Error(`Host port ${pm.hostPort} does not match container port ${pm.containerPort}.`);
                }
            }
            if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.Bridge) {
                if (pm.hostPort === undefined) {
                    pm = Object.assign({}, pm, { hostPort: 0 });
                }
            }
            return pm;
        }));
    }
    /**
     * Add one or more ulimits to this container
     */
    addUlimits(...ulimits) {
        this.ulimits.push(...ulimits);
    }
    /**
     * Add one or more volumes to this container
     */
    addVolumesFrom(...volumesFrom) {
        this.volumesFrom.push(...volumesFrom);
    }
    /**
     * Add a statement to the Task Definition's Execution policy
     */
    addToExecutionPolicy(statement) {
        this.taskDefinition.addToExecutionRolePolicy(statement);
    }
    /**
     * Ingress Port is needed to set the security group ingress for the task/service
     */
    get ingressPort() {
        if (this.portMappings.length === 0) {
            throw new Error(`Container ${this.node.id} hasn't defined any ports. Call addPortMappings().`);
        }
        const defaultPortMapping = this.portMappings[0];
        if (defaultPortMapping.hostPort !== undefined && defaultPortMapping.hostPort !== 0) {
            return defaultPortMapping.hostPort;
        }
        if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.Bridge) {
            return 0;
        }
        return defaultPortMapping.containerPort;
    }
    /**
     * Return the port that the container will be listening on by default
     */
    get containerPort() {
        if (this.portMappings.length === 0) {
            throw new Error(`Container ${this.node.id} hasn't defined any ports. Call addPortMappings().`);
        }
        const defaultPortMapping = this.portMappings[0];
        return defaultPortMapping.containerPort;
    }
    /**
     * Render this container definition to a CloudFormation object
     */
    renderContainerDefinition() {
        return {
            command: this.props.command,
            cpu: this.props.cpu,
            disableNetworking: this.props.disableNetworking,
            dnsSearchDomains: this.props.dnsSearchDomains,
            dnsServers: this.props.dnsServers,
            dockerLabels: this.props.dockerLabels,
            dockerSecurityOptions: this.props.dockerSecurityOptions,
            entryPoint: this.props.entryPoint,
            essential: this.essential,
            hostname: this.props.hostname,
            image: this.props.image.imageName,
            memory: this.props.memoryLimitMiB,
            memoryReservation: this.props.memoryReservationMiB,
            mountPoints: this.mountPoints.map(renderMountPoint),
            name: this.node.id,
            portMappings: this.portMappings.map(renderPortMapping),
            privileged: this.props.privileged,
            readonlyRootFilesystem: this.props.readonlyRootFilesystem,
            repositoryCredentials: this.props.image.toRepositoryCredentialsJson(),
            ulimits: this.ulimits.map(renderUlimit),
            user: this.props.user,
            volumesFrom: this.volumesFrom.map(renderVolumeFrom),
            workingDirectory: this.props.workingDirectory,
            logConfiguration: this.props.logging && this.props.logging.renderLogDriver(),
            environment: this.props.environment && renderKV(this.props.environment, 'name', 'value'),
            extraHosts: this.props.extraHosts && renderKV(this.props.extraHosts, 'hostname', 'ipAddress'),
            healthCheck: this.props.healthCheck && renderHealthCheck(this.props.healthCheck),
            links: this.links,
            linuxParameters: this.linuxParameters.renderLinuxParameters(),
        };
    }
}
exports.ContainerDefinition = ContainerDefinition;
function renderKV(env, keyName, valueName) {
    const ret = [];
    for (const [key, value] of Object.entries(env)) {
        ret.push({ [keyName]: key, [valueName]: value });
    }
    return ret;
}
function renderHealthCheck(hc) {
    return {
        command: getHealthCheckCommand(hc),
        interval: hc.intervalSeconds !== undefined ? hc.intervalSeconds : 30,
        retries: hc.retries !== undefined ? hc.retries : 3,
        startPeriod: hc.startPeriod,
        timeout: hc.timeout !== undefined ? hc.timeout : 5,
    };
}
function getHealthCheckCommand(hc) {
    const cmd = hc.command;
    const hcCommand = new Array();
    if (cmd.length === 0) {
        throw new Error(`At least one argument must be supplied for health check command.`);
    }
    if (cmd.length === 1) {
        hcCommand.push('CMD-SHELL', cmd[0]);
        return hcCommand;
    }
    if (cmd[0] !== "CMD" || cmd[0] !== 'CMD-SHELL') {
        hcCommand.push('CMD');
    }
    return hcCommand.concat(cmd);
}
/**
 * Type of resource to set a limit on
 */
var UlimitName;
(function (UlimitName) {
    UlimitName["Core"] = "core";
    UlimitName["Cpu"] = "cpu";
    UlimitName["Data"] = "data";
    UlimitName["Fsize"] = "fsize";
    UlimitName["Locks"] = "locks";
    UlimitName["Memlock"] = "memlock";
    UlimitName["Msgqueue"] = "msgqueue";
    UlimitName["Nice"] = "nice";
    UlimitName["Nofile"] = "nofile";
    UlimitName["Nproc"] = "nproc";
    UlimitName["Rss"] = "rss";
    UlimitName["Rtprio"] = "rtprio";
    UlimitName["Rttime"] = "rttime";
    UlimitName["Sigpending"] = "sigpending";
    UlimitName["Stack"] = "stack";
})(UlimitName = exports.UlimitName || (exports.UlimitName = {}));
function renderUlimit(ulimit) {
    return {
        name: ulimit.name,
        softLimit: ulimit.softLimit,
        hardLimit: ulimit.hardLimit,
    };
}
/**
 * Network protocol
 */
var Protocol;
(function (Protocol) {
    /**
     * TCP
     */
    Protocol["Tcp"] = "tcp";
    /**
     * UDP
     */
    Protocol["Udp"] = "udp";
})(Protocol = exports.Protocol || (exports.Protocol = {}));
function renderPortMapping(pm) {
    return {
        containerPort: pm.containerPort,
        hostPort: pm.hostPort,
        protocol: pm.protocol || Protocol.Tcp,
    };
}
function renderMountPoint(mp) {
    return {
        containerPath: mp.containerPath,
        readOnly: mp.readOnly,
        sourceVolume: mp.sourceVolume,
    };
}
function renderVolumeFrom(vf) {
    return {
        sourceContainer: vf.sourceContainer,
        readOnly: vf.readOnly,
    };
}
//# sourceMappingURL=data:application/json;base64,
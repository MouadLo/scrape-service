"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const iam = require("@aws-cdk/aws-iam");
const lambda = require("@aws-cdk/aws-lambda");
const sns = require("@aws-cdk/aws-sns");
const cdk = require("@aws-cdk/cdk");
const fs = require("fs");
const path = require("path");
/**
 * A hook to drain instances from ECS traffic before they're terminated
 */
class InstanceDrainHook extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const drainTimeSeconds = props.drainTimeSec !== undefined ? props.drainTimeSec : 300;
        if (drainTimeSeconds < 0 || drainTimeSeconds > 900) {
            throw new Error(`Drain time must be between 0 and 900 seconds, got: ${drainTimeSeconds}`);
        }
        // Invoke Lambda via SNS Topic
        const topic = new sns.Topic(this, 'Topic');
        const fn = new lambda.Function(this, 'Function', {
            code: lambda.Code.inline(fs.readFileSync(path.join(__dirname, 'lambda-source', 'index.py'), { encoding: 'utf-8' })),
            handler: 'index.lambda_handler',
            runtime: lambda.Runtime.Python36,
            // Timeout: some extra margin for additional API calls made by the Lambda,
            // up to a maximum of 15 minutes.
            timeout: Math.min(drainTimeSeconds + 10, 900),
            environment: {
                CLUSTER: props.cluster.clusterName
            }
        });
        // Hook everything up: ASG -> Topic, Topic -> Lambda
        props.autoScalingGroup.onLifecycleTransition('DrainHook', {
            lifecycleTransition: autoscaling.LifecycleTransition.InstanceTerminating,
            defaultResult: autoscaling.DefaultResult.Continue,
            notificationTarget: topic,
            heartbeatTimeoutSec: drainTimeSeconds,
        });
        topic.subscribeLambda(fn);
        // FIXME: These should probably be restricted usefully in some way, but I don't exactly
        // know how.
        fn.addToRolePolicy(new iam.PolicyStatement()
            .addActions('autoscaling:CompleteLifecycleAction', 'ec2:DescribeInstances', 'ec2:DescribeInstanceAttribute', 'ec2:DescribeInstanceStatus', 'ec2:DescribeHosts')
            .addAllResources());
        // FIXME: These should be restricted to the ECS cluster probably, but I don't exactly
        // know how.
        fn.addToRolePolicy(new iam.PolicyStatement()
            .addActions('ecs:ListContainerInstances', 'ecs:SubmitContainerStateChange', 'ecs:SubmitTaskStateChange', 'ecs:DescribeContainerInstances', 'ecs:UpdateContainerInstancesState', 'ecs:ListTasks', 'ecs:DescribeTasks')
            .addAllResources());
    }
}
exports.InstanceDrainHook = InstanceDrainHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UtZHJhaW4taG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc3RhbmNlLWRyYWluLWhvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3REFBeUQ7QUFDekQsd0NBQXlDO0FBQ3pDLDhDQUErQztBQUMvQyx3Q0FBeUM7QUFDekMsb0NBQXFDO0FBQ3JDLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUErQjlCOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSxHQUFHLENBQUMsU0FBUztJQUNsRCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQTZCO1FBQ3pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBRXJGLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtZQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7U0FDM0Y7UUFFRCw4QkFBOEI7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUMvQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNuSCxPQUFPLEVBQUUsc0JBQXNCO1lBQy9CLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVE7WUFDaEMsMEVBQTBFO1lBQzFFLGlDQUFpQztZQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDO1lBQzdDLFdBQVcsRUFBRTtnQkFDWCxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXO2FBQ25DO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsb0RBQW9EO1FBQ3BELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUU7WUFDeEQsbUJBQW1CLEVBQUUsV0FBVyxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQjtZQUN4RSxhQUFhLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRO1lBQ2pELGtCQUFrQixFQUFFLEtBQUs7WUFDekIsbUJBQW1CLEVBQUUsZ0JBQWdCO1NBQ3RDLENBQUMsQ0FBQztRQUNILEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFMUIsdUZBQXVGO1FBQ3ZGLFlBQVk7UUFDWixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUN6QyxVQUFVLENBQ1QscUNBQXFDLEVBQ3JDLHVCQUF1QixFQUN2QiwrQkFBK0IsRUFDL0IsNEJBQTRCLEVBQzVCLG1CQUFtQixDQUNwQjthQUNBLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFdEIscUZBQXFGO1FBQ3JGLFlBQVk7UUFDWixFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTthQUN6QyxVQUFVLENBQ1QsNEJBQTRCLEVBQzVCLGdDQUFnQyxFQUNoQywyQkFBMkIsRUFDM0IsZ0NBQWdDLEVBQ2hDLG1DQUFtQyxFQUNuQyxlQUFlLEVBQ2YsbUJBQW1CLENBQUM7YUFDckIsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUExREQsOENBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF1dG9zY2FsaW5nID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWF1dG9zY2FsaW5nJyk7XG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpO1xuaW1wb3J0IGxhbWJkYSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnKTtcbmltcG9ydCBzbnMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc25zJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgeyBJQ2x1c3RlciB9IGZyb20gJy4uL2NsdXN0ZXInO1xuXG4vLyBSZWZlcmVuY2UgZm9yIHRoZSBzb3VyY2UgaW4gdGhpcyBwYWNrYWdlOlxuLy9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3Mtc2FtcGxlcy9lY3MtcmVmYXJjaC1jbG91ZGZvcm1hdGlvbi9ibG9iL21hc3Rlci9pbmZyYXN0cnVjdHVyZS9saWZlY3ljbGVob29rLnlhbWxcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBpbnN0YW5jZSBkcmFpbmluZyBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VEcmFpbkhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQXV0b1NjYWxpbmdHcm91cCB0byBpbnN0YWxsIHRoZSBpbnN0YW5jZSBkcmFpbmluZyBob29rIGZvclxuICAgKi9cbiAgYXV0b1NjYWxpbmdHcm91cDogYXV0b3NjYWxpbmcuSUF1dG9TY2FsaW5nR3JvdXA7XG5cbiAgLyoqXG4gICAqIFRoZSBjbHVzdGVyIG9uIHdoaWNoIHRhc2tzIGhhdmUgYmVlbiBzY2hlZHVsZWRcbiAgICovXG4gIGNsdXN0ZXI6IElDbHVzdGVyO1xuXG4gIC8qKlxuICAgKiBIb3cgbWFueSBzZWNvbmRzIHRvIGdpdmUgdGFza3MgdG8gZHJhaW4gYmVmb3JlIHRoZSBpbnN0YW5jZSBpcyB0ZXJtaW5hdGVkIGFueXdheVxuICAgKlxuICAgKiBNdXN0IGJlIGJldHdlZW4gMCBhbmQgOTAwLlxuICAgKlxuICAgKiBAZGVmYXVsdCA5MDBcbiAgICovXG4gIGRyYWluVGltZVNlYz86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIGhvb2sgdG8gZHJhaW4gaW5zdGFuY2VzIGZyb20gRUNTIHRyYWZmaWMgYmVmb3JlIHRoZXkncmUgdGVybWluYXRlZFxuICovXG5leHBvcnQgY2xhc3MgSW5zdGFuY2VEcmFpbkhvb2sgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBJbnN0YW5jZURyYWluSG9va1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIGNvbnN0IGRyYWluVGltZVNlY29uZHMgPSBwcm9wcy5kcmFpblRpbWVTZWMgIT09IHVuZGVmaW5lZCA/IHByb3BzLmRyYWluVGltZVNlYyA6IDMwMDtcblxuICAgIGlmIChkcmFpblRpbWVTZWNvbmRzIDwgMCB8fCBkcmFpblRpbWVTZWNvbmRzID4gOTAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERyYWluIHRpbWUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDkwMCBzZWNvbmRzLCBnb3Q6ICR7ZHJhaW5UaW1lU2Vjb25kc31gKTtcbiAgICB9XG5cbiAgICAvLyBJbnZva2UgTGFtYmRhIHZpYSBTTlMgVG9waWNcbiAgICBjb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWModGhpcywgJ1RvcGljJyk7XG4gICAgY29uc3QgZm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsICdGdW5jdGlvbicsIHtcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmlubGluZShmcy5yZWFkRmlsZVN5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJ2xhbWJkYS1zb3VyY2UnLCAnaW5kZXgucHknKSwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KSksXG4gICAgICBoYW5kbGVyOiAnaW5kZXgubGFtYmRhX2hhbmRsZXInLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUHl0aG9uMzYsXG4gICAgICAvLyBUaW1lb3V0OiBzb21lIGV4dHJhIG1hcmdpbiBmb3IgYWRkaXRpb25hbCBBUEkgY2FsbHMgbWFkZSBieSB0aGUgTGFtYmRhLFxuICAgICAgLy8gdXAgdG8gYSBtYXhpbXVtIG9mIDE1IG1pbnV0ZXMuXG4gICAgICB0aW1lb3V0OiBNYXRoLm1pbihkcmFpblRpbWVTZWNvbmRzICsgMTAsIDkwMCksXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBDTFVTVEVSOiBwcm9wcy5jbHVzdGVyLmNsdXN0ZXJOYW1lXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBIb29rIGV2ZXJ5dGhpbmcgdXA6IEFTRyAtPiBUb3BpYywgVG9waWMgLT4gTGFtYmRhXG4gICAgcHJvcHMuYXV0b1NjYWxpbmdHcm91cC5vbkxpZmVjeWNsZVRyYW5zaXRpb24oJ0RyYWluSG9vaycsIHtcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IGF1dG9zY2FsaW5nLkxpZmVjeWNsZVRyYW5zaXRpb24uSW5zdGFuY2VUZXJtaW5hdGluZyxcbiAgICAgIGRlZmF1bHRSZXN1bHQ6IGF1dG9zY2FsaW5nLkRlZmF1bHRSZXN1bHQuQ29udGludWUsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXQ6IHRvcGljLFxuICAgICAgaGVhcnRiZWF0VGltZW91dFNlYzogZHJhaW5UaW1lU2Vjb25kcyxcbiAgICB9KTtcbiAgICB0b3BpYy5zdWJzY3JpYmVMYW1iZGEoZm4pO1xuXG4gICAgLy8gRklYTUU6IFRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZXN0cmljdGVkIHVzZWZ1bGx5IGluIHNvbWUgd2F5LCBidXQgSSBkb24ndCBleGFjdGx5XG4gICAgLy8ga25vdyBob3cuXG4gICAgZm4uYWRkVG9Sb2xlUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRBY3Rpb25zKFxuICAgICAgICAnYXV0b3NjYWxpbmc6Q29tcGxldGVMaWZlY3ljbGVBY3Rpb24nLFxuICAgICAgICAnZWMyOkRlc2NyaWJlSW5zdGFuY2VzJyxcbiAgICAgICAgJ2VjMjpEZXNjcmliZUluc3RhbmNlQXR0cmlidXRlJyxcbiAgICAgICAgJ2VjMjpEZXNjcmliZUluc3RhbmNlU3RhdHVzJyxcbiAgICAgICAgJ2VjMjpEZXNjcmliZUhvc3RzJyxcbiAgICAgIClcbiAgICAgIC5hZGRBbGxSZXNvdXJjZXMoKSk7XG5cbiAgICAvLyBGSVhNRTogVGhlc2Ugc2hvdWxkIGJlIHJlc3RyaWN0ZWQgdG8gdGhlIEVDUyBjbHVzdGVyIHByb2JhYmx5LCBidXQgSSBkb24ndCBleGFjdGx5XG4gICAgLy8ga25vdyBob3cuXG4gICAgZm4uYWRkVG9Sb2xlUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRBY3Rpb25zKFxuICAgICAgICAnZWNzOkxpc3RDb250YWluZXJJbnN0YW5jZXMnLFxuICAgICAgICAnZWNzOlN1Ym1pdENvbnRhaW5lclN0YXRlQ2hhbmdlJyxcbiAgICAgICAgJ2VjczpTdWJtaXRUYXNrU3RhdGVDaGFuZ2UnLFxuICAgICAgICAnZWNzOkRlc2NyaWJlQ29udGFpbmVySW5zdGFuY2VzJyxcbiAgICAgICAgJ2VjczpVcGRhdGVDb250YWluZXJJbnN0YW5jZXNTdGF0ZScsXG4gICAgICAgICdlY3M6TGlzdFRhc2tzJyxcbiAgICAgICAgJ2VjczpEZXNjcmliZVRhc2tzJylcbiAgICAgIC5hZGRBbGxSZXNvdXJjZXMoKSk7XG4gIH1cbn0iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const util_1 = require("../util");
/**
 * Start a service on an EC2 cluster
 */
class Ec2EventRuleTarget extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        if (!util_1.isEc2Compatible(props.taskDefinition.compatibility)) {
            throw new Error('Supplied TaskDefinition is not configured for compatibility with EC2');
        }
        this.cluster = props.cluster;
        this.taskDefinition = props.taskDefinition;
        this.taskCount = props.taskCount !== undefined ? props.taskCount : 1;
    }
    /**
     * Allows using containers as target of CloudWatch events
     */
    asEventRuleTarget(_ruleArn, _ruleUniqueId) {
        const role = this.eventsRole;
        role.addToPolicy(new iam.PolicyStatement()
            .addAction('ecs:RunTask')
            .addResource(this.taskDefinition.taskDefinitionArn)
            .addCondition('ArnEquals', { "ecs:cluster": this.cluster.clusterArn }));
        return {
            id: this.node.id,
            arn: this.cluster.clusterArn,
            roleArn: role.roleArn,
            ecsParameters: {
                taskCount: this.taskCount,
                taskDefinitionArn: this.taskDefinition.taskDefinitionArn
            }
        };
    }
    /**
     * Create or get the IAM Role used to start this Task Definition.
     *
     * We create it under the TaskDefinition object so that if we have multiple EventTargets
     * they can reuse the same role.
     */
    get eventsRole() {
        let role = this.taskDefinition.node.tryFindChild('EventsRole');
        if (role === undefined) {
            role = new iam.Role(this.taskDefinition, 'EventsRole', {
                assumedBy: new iam.ServicePrincipal('events.amazonaws.com')
            });
        }
        return role;
    }
    /**
     * Prepare the Event Rule Target
     */
    prepare() {
        // If it so happens that a Task Execution Role was created for the TaskDefinition,
        // then the CloudWatch Events Role must have permissions to pass it (otherwise it doesn't).
        //
        // It never needs permissions to the Task Role.
        if (this.taskDefinition.executionRole !== undefined) {
            this.taskDefinition.executionRole.grantPassRole(this.eventsRole);
        }
    }
}
exports.Ec2EventRuleTarget = Ec2EventRuleTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLWV2ZW50LXJ1bGUtdGFyZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWMyLWV2ZW50LXJ1bGUtdGFyZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUdyQyxrQ0FBMEM7QUF3QjFDOztHQUVHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxHQUFHLENBQUMsU0FBUztJQUtuRCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQThCO1FBQzFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLHNCQUFlLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUN4RCxNQUFNLElBQUksS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7U0FDekY7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpQkFBaUIsQ0FBQyxRQUFnQixFQUFFLGFBQXFCO1FBQzlELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUU7YUFDdkMsU0FBUyxDQUFDLGFBQWEsQ0FBQzthQUN4QixXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQzthQUNsRCxZQUFZLENBQUMsV0FBVyxFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTFFLE9BQU87WUFDTCxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVU7WUFDNUIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLGFBQWEsRUFBRTtnQkFDYixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCO2FBQ3pEO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQVcsVUFBVTtRQUNuQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFjLENBQUM7UUFDNUUsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3RCLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUU7Z0JBQ3JELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQzthQUM1RCxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ08sT0FBTztRQUNmLGtGQUFrRjtRQUNsRiwyRkFBMkY7UUFDM0YsRUFBRTtRQUNGLCtDQUErQztRQUMvQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUNuRCxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQztDQUNGO0FBcEVELGdEQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBldmVudHMgPSByZXF1aXJlICgnQGF3cy1jZGsvYXdzLWV2ZW50cycpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IFRhc2tEZWZpbml0aW9uIH0gZnJvbSAnLi4vYmFzZS90YXNrLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgSUNsdXN0ZXIgfSBmcm9tICcuLi9jbHVzdGVyJztcbmltcG9ydCB7IGlzRWMyQ29tcGF0aWJsZSB9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgdG8gZGVmaW5lIGFuIEVDMiBFdmVudCBUYXNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRWMyRXZlbnRSdWxlVGFyZ2V0UHJvcHMge1xuICAvKipcbiAgICogQ2x1c3RlciB3aGVyZSBzZXJ2aWNlIHdpbGwgYmUgZGVwbG95ZWRcbiAgICovXG4gIHJlYWRvbmx5IGNsdXN0ZXI6IElDbHVzdGVyO1xuXG4gIC8qKlxuICAgKiBUYXNrIERlZmluaXRpb24gb2YgdGhlIHRhc2sgdGhhdCBzaG91bGQgYmUgc3RhcnRlZFxuICAgKi9cbiAgcmVhZG9ubHkgdGFza0RlZmluaXRpb246IFRhc2tEZWZpbml0aW9uO1xuXG4gIC8qKlxuICAgKiBIb3cgbWFueSB0YXNrcyBzaG91bGQgYmUgc3RhcnRlZCB3aGVuIHRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAqXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHJlYWRvbmx5IHRhc2tDb3VudD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBTdGFydCBhIHNlcnZpY2Ugb24gYW4gRUMyIGNsdXN0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEVjMkV2ZW50UnVsZVRhcmdldCBleHRlbmRzIGNkay5Db25zdHJ1Y3QgaW1wbGVtZW50cyBldmVudHMuSUV2ZW50UnVsZVRhcmdldCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2x1c3RlcjogSUNsdXN0ZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGFza0RlZmluaXRpb246IFRhc2tEZWZpbml0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IHRhc2tDb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRWMyRXZlbnRSdWxlVGFyZ2V0UHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgaWYgKCFpc0VjMkNvbXBhdGlibGUocHJvcHMudGFza0RlZmluaXRpb24uY29tcGF0aWJpbGl0eSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcGxpZWQgVGFza0RlZmluaXRpb24gaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBFQzInKTtcbiAgICB9XG5cbiAgICB0aGlzLmNsdXN0ZXIgPSBwcm9wcy5jbHVzdGVyO1xuICAgIHRoaXMudGFza0RlZmluaXRpb24gPSBwcm9wcy50YXNrRGVmaW5pdGlvbjtcbiAgICB0aGlzLnRhc2tDb3VudCA9IHByb3BzLnRhc2tDb3VudCAhPT0gdW5kZWZpbmVkID8gcHJvcHMudGFza0NvdW50IDogMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdXNpbmcgY29udGFpbmVycyBhcyB0YXJnZXQgb2YgQ2xvdWRXYXRjaCBldmVudHNcbiAgICovXG4gIHB1YmxpYyBhc0V2ZW50UnVsZVRhcmdldChfcnVsZUFybjogc3RyaW5nLCBfcnVsZVVuaXF1ZUlkOiBzdHJpbmcpOiBldmVudHMuRXZlbnRSdWxlVGFyZ2V0UHJvcHMge1xuICAgIGNvbnN0IHJvbGUgPSB0aGlzLmV2ZW50c1JvbGU7XG5cbiAgICByb2xlLmFkZFRvUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRBY3Rpb24oJ2VjczpSdW5UYXNrJylcbiAgICAgIC5hZGRSZXNvdXJjZSh0aGlzLnRhc2tEZWZpbml0aW9uLnRhc2tEZWZpbml0aW9uQXJuKVxuICAgICAgLmFkZENvbmRpdGlvbignQXJuRXF1YWxzJywgeyBcImVjczpjbHVzdGVyXCI6IHRoaXMuY2x1c3Rlci5jbHVzdGVyQXJuIH0pKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogdGhpcy5ub2RlLmlkLFxuICAgICAgYXJuOiB0aGlzLmNsdXN0ZXIuY2x1c3RlckFybixcbiAgICAgIHJvbGVBcm46IHJvbGUucm9sZUFybixcbiAgICAgIGVjc1BhcmFtZXRlcnM6IHtcbiAgICAgICAgdGFza0NvdW50OiB0aGlzLnRhc2tDb3VudCxcbiAgICAgICAgdGFza0RlZmluaXRpb25Bcm46IHRoaXMudGFza0RlZmluaXRpb24udGFza0RlZmluaXRpb25Bcm5cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBvciBnZXQgdGhlIElBTSBSb2xlIHVzZWQgdG8gc3RhcnQgdGhpcyBUYXNrIERlZmluaXRpb24uXG4gICAqXG4gICAqIFdlIGNyZWF0ZSBpdCB1bmRlciB0aGUgVGFza0RlZmluaXRpb24gb2JqZWN0IHNvIHRoYXQgaWYgd2UgaGF2ZSBtdWx0aXBsZSBFdmVudFRhcmdldHNcbiAgICogdGhleSBjYW4gcmV1c2UgdGhlIHNhbWUgcm9sZS5cbiAgICovXG4gIHB1YmxpYyBnZXQgZXZlbnRzUm9sZSgpOiBpYW0uSVJvbGUge1xuICAgIGxldCByb2xlID0gdGhpcy50YXNrRGVmaW5pdGlvbi5ub2RlLnRyeUZpbmRDaGlsZCgnRXZlbnRzUm9sZScpIGFzIGlhbS5JUm9sZTtcbiAgICBpZiAocm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMudGFza0RlZmluaXRpb24sICdFdmVudHNSb2xlJywge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnZXZlbnRzLmFtYXpvbmF3cy5jb20nKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvbGU7XG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZSB0aGUgRXZlbnQgUnVsZSBUYXJnZXRcbiAgICovXG4gIHByb3RlY3RlZCBwcmVwYXJlKCkge1xuICAgIC8vIElmIGl0IHNvIGhhcHBlbnMgdGhhdCBhIFRhc2sgRXhlY3V0aW9uIFJvbGUgd2FzIGNyZWF0ZWQgZm9yIHRoZSBUYXNrRGVmaW5pdGlvbixcbiAgICAvLyB0aGVuIHRoZSBDbG91ZFdhdGNoIEV2ZW50cyBSb2xlIG11c3QgaGF2ZSBwZXJtaXNzaW9ucyB0byBwYXNzIGl0IChvdGhlcndpc2UgaXQgZG9lc24ndCkuXG4gICAgLy9cbiAgICAvLyBJdCBuZXZlciBuZWVkcyBwZXJtaXNzaW9ucyB0byB0aGUgVGFzayBSb2xlLlxuICAgIGlmICh0aGlzLnRhc2tEZWZpbml0aW9uLmV4ZWN1dGlvblJvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50YXNrRGVmaW5pdGlvbi5leGVjdXRpb25Sb2xlLmdyYW50UGFzc1JvbGUodGhpcy5ldmVudHNSb2xlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
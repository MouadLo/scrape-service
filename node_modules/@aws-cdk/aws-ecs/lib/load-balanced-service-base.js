"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const cdk = require("@aws-cdk/cdk");
var LoadBalancerType;
(function (LoadBalancerType) {
    LoadBalancerType[LoadBalancerType["Application"] = 0] = "Application";
    LoadBalancerType[LoadBalancerType["Network"] = 1] = "Network";
})(LoadBalancerType = exports.LoadBalancerType || (exports.LoadBalancerType = {}));
/**
 * Base class for load-balanced Fargate and ECS service
 */
class LoadBalancedServiceBase extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Load balancer
        this.loadBalancerType = props.loadBalancerType !== undefined ? props.loadBalancerType : LoadBalancerType.Application;
        if (this.loadBalancerType !== LoadBalancerType.Application && this.loadBalancerType !== LoadBalancerType.Network) {
            throw new Error(`invalid loadBalancerType`);
        }
        const internetFacing = props.publicLoadBalancer !== undefined ? props.publicLoadBalancer : true;
        const lbProps = {
            vpc: props.cluster.vpc,
            internetFacing
        };
        if (this.loadBalancerType === LoadBalancerType.Application) {
            this.loadBalancer = new elbv2.ApplicationLoadBalancer(this, 'LB', lbProps);
        }
        else {
            this.loadBalancer = new elbv2.NetworkLoadBalancer(this, 'LB', lbProps);
        }
        const targetProps = {
            port: 80
        };
        const hasCertificate = props.certificate !== undefined;
        if (hasCertificate && this.loadBalancerType !== LoadBalancerType.Application) {
            throw new Error("Cannot add certificate to an NLB");
        }
        if (this.loadBalancerType === LoadBalancerType.Application) {
            this.listener = this.loadBalancer.addListener('PublicListener', {
                port: hasCertificate ? 443 : 80,
                open: true
            });
            this.targetGroup = this.listener.addTargets('ECS', targetProps);
            if (props.certificate !== undefined) {
                this.listener.addCertificateArns('Arns', [props.certificate.certificateArn]);
            }
        }
        else {
            this.listener = this.loadBalancer.addListener('PublicListener', { port: 80 });
            this.targetGroup = this.listener.addTargets('ECS', targetProps);
        }
        new cdk.CfnOutput(this, 'LoadBalancerDNS', { value: this.loadBalancer.dnsName });
    }
    addServiceAsTarget(service) {
        if (this.loadBalancerType === LoadBalancerType.Application) {
            this.targetGroup.addTarget(service);
        }
        else {
            this.targetGroup.addTarget(service);
        }
    }
}
exports.LoadBalancedServiceBase = LoadBalancedServiceBase;
//# sourceMappingURL=data:application/json;base64,
import cdk = require('@aws-cdk/cdk');
import { LoadBalancedServiceBase, LoadBalancedServiceBaseProps } from './load-balanced-service-base';
/**
 * Properties for a LoadBalancedEc2Service
 */
export interface LoadBalancedEc2ServiceProps extends LoadBalancedServiceBaseProps {
    /**
     * The hard limit (in MiB) of memory to present to the container.
     *
     * If your container attempts to exceed the allocated memory, the container
     * is terminated.
     *
     * At least one of memoryLimitMiB and memoryReservationMiB is required.
     */
    readonly memoryLimitMiB?: number;
    /**
     * The soft limit (in MiB) of memory to reserve for the container.
     *
     * When system memory is under contention, Docker attempts to keep the
     * container memory within the limit. If the container requires more memory,
     * it can consume up to the value specified by the Memory property or all of
     * the available memory on the container instanceâ€”whichever comes first.
     *
     * At least one of memoryLimitMiB and memoryReservationMiB is required.
     */
    readonly memoryReservationMiB?: number;
}
/**
 * A single task running on an ECS cluster fronted by a load balancer
 */
export declare class LoadBalancedEc2Service extends LoadBalancedServiceBase {
    constructor(scope: cdk.Construct, id: string, props: LoadBalancedEc2ServiceProps);
}

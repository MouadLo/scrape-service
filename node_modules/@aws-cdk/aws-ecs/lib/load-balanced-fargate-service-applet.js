"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_certificatemanager_1 = require("@aws-cdk/aws-certificatemanager");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_route53_1 = require("@aws-cdk/aws-route53");
const cdk = require("@aws-cdk/cdk");
const cluster_1 = require("./cluster");
const container_image_1 = require("./container-image");
const load_balanced_fargate_service_1 = require("./load-balanced-fargate-service");
/**
 * An applet for a LoadBalancedFargateService. Sets up a Fargate service, Application
 * load balancer, ECS cluster, VPC, and (optionally) Route53 alias record.
 */
class LoadBalancedFargateServiceApplet extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new aws_ec2_1.VpcNetwork(this, 'MyVpc', { maxAZs: 2 });
        const cluster = new cluster_1.Cluster(this, 'Cluster', { vpc });
        let domainZone;
        if (props.domainZone) {
            domainZone = new aws_route53_1.HostedZoneProvider(this, { domainName: props.domainZone }).findAndImport(this, 'Zone');
        }
        let certificate;
        if (props.certificate) {
            certificate = aws_certificatemanager_1.Certificate.import(this, 'Cert', { certificateArn: props.certificate });
        }
        // Instantiate Fargate Service with just cluster and image
        new load_balanced_fargate_service_1.LoadBalancedFargateService(this, "FargateService", {
            cluster,
            cpu: props.cpu,
            containerPort: props.containerPort,
            memoryMiB: props.memoryMiB,
            publicLoadBalancer: props.publicLoadBalancer,
            publicTasks: props.publicTasks,
            image: container_image_1.ContainerImage.fromRegistry(props.image),
            desiredCount: props.desiredCount,
            environment: props.environment,
            certificate,
            domainName: props.domainName,
            domainZone
        });
    }
}
exports.LoadBalancedFargateServiceApplet = LoadBalancedFargateServiceApplet;
//# sourceMappingURL=data:application/json;base64,
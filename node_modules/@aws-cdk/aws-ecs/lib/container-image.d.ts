import ecr = require('@aws-cdk/aws-ecr');
import cdk = require('@aws-cdk/cdk');
import { ContainerDefinition } from './container-definition';
import { CfnTaskDefinition } from './ecs.generated';
/**
 * Constructs for types of container images
 */
export declare abstract class ContainerImage {
    /**
     * Reference an image on DockerHub or another online registry
     */
    static fromRegistry(name: string, props?: RepositoryImageProps): RepositoryImage;
    /**
     * Reference an image in an ECR repository
     */
    static fromEcrRepository(repository: ecr.IRepository, tag?: string): EcrImage;
    /**
     * Reference an image that's constructed directly from sources on disk
     */
    static fromAsset(scope: cdk.Construct, id: string, props: AssetImageProps): AssetImage;
    /**
     * Name of the image
     */
    abstract readonly imageName: string;
    /**
     * Called when the image is used by a ContainerDefinition
     */
    abstract bind(containerDefinition: ContainerDefinition): void;
    /**
     * Render the Repository credentials to the CloudFormation object
     */
    abstract toRepositoryCredentialsJson(): CfnTaskDefinition.RepositoryCredentialsProperty | undefined;
}
import { AssetImage, AssetImageProps } from './images/asset-image';
import { EcrImage } from './images/ecr';
import { RepositoryImage, RepositoryImageProps } from './images/repository';

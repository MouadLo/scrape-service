"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const iam = require("@aws-cdk/aws-iam");
const cloudmap = require("@aws-cdk/aws-servicediscovery");
const cdk = require("@aws-cdk/cdk");
const instance_drain_hook_1 = require("./drain-hook/instance-drain-hook");
const ecs_generated_1 = require("./ecs.generated");
/**
 * A container cluster that runs on your EC2 instances
 */
class Cluster extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Connections manager for the EC2 cluster
         */
        this.connections = new ec2.Connections();
        /**
         * Whether the cluster has EC2 capacity associated with it
         */
        this._hasEc2Capacity = false;
        const cluster = new ecs_generated_1.CfnCluster(this, 'Resource', { clusterName: props.clusterName });
        this.vpc = props.vpc;
        this.clusterArn = cluster.clusterArn;
        this.clusterName = cluster.clusterName;
    }
    /**
     * Import an existing cluster
     */
    static import(scope, id, props) {
        return new ImportedCluster(scope, id, props);
    }
    /**
     * Add an AWS Cloud Map DNS namespace for this cluster.
     * NOTE: HttpNamespaces are not supported, as ECS always requires a DNSConfig when registering an instance to a Cloud
     * Map service.
     */
    addDefaultCloudMapNamespace(options) {
        if (this._defaultNamespace !== undefined) {
            throw new Error("Can only add default namespace once.");
        }
        const namespaceType = options.type === undefined || options.type === NamespaceType.PrivateDns
            ? cloudmap.NamespaceType.DnsPrivate
            : cloudmap.NamespaceType.DnsPublic;
        const sdNamespace = namespaceType === cloudmap.NamespaceType.DnsPrivate ?
            new cloudmap.PrivateDnsNamespace(this, 'DefaultServiceDiscoveryNamespace', {
                name: options.name,
                vpc: this.vpc
            }) :
            new cloudmap.PublicDnsNamespace(this, 'DefaultServiceDiscoveryNamespace', {
                name: options.name,
            });
        this._defaultNamespace = sdNamespace;
        return sdNamespace;
    }
    /**
     * Getter for namespace added to cluster
     */
    get defaultNamespace() {
        return this._defaultNamespace;
    }
    /**
     * Add a default-configured AutoScalingGroup running the ECS-optimized AMI to this Cluster
     *
     * Returns the AutoScalingGroup so you can add autoscaling settings to it.
     */
    addCapacity(id, options) {
        const autoScalingGroup = new autoscaling.AutoScalingGroup(this, id, Object.assign({}, options, { vpc: this.vpc, machineImage: new EcsOptimizedAmi(), updateType: options.updateType || autoscaling.UpdateType.ReplacingUpdate, instanceType: options.instanceType }));
        this.addAutoScalingGroup(autoScalingGroup, options);
        return autoScalingGroup;
    }
    /**
     * Add compute capacity to this ECS cluster in the form of an AutoScalingGroup
     */
    addAutoScalingGroup(autoScalingGroup, options = {}) {
        this._hasEc2Capacity = true;
        this.connections.connections.addSecurityGroup(...autoScalingGroup.connections.securityGroups);
        // Tie instances to cluster
        autoScalingGroup.addUserData(`echo ECS_CLUSTER=${this.clusterName} >> /etc/ecs/ecs.config`);
        if (!options.containersAccessInstanceRole) {
            // Deny containers access to instance metadata service
            // Source: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
            autoScalingGroup.addUserData('sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP');
            autoScalingGroup.addUserData('sudo service iptables save');
            // The following is only for AwsVpc networking mode, but doesn't hurt for the other modes.
            autoScalingGroup.addUserData('echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config');
        }
        // ECS instances must be able to do these things
        // Source: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
        autoScalingGroup.addToRolePolicy(new iam.PolicyStatement().addActions("ecs:CreateCluster", "ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:StartTelemetrySession", "ecs:Submit*", "ecr:GetAuthorizationToken", "logs:CreateLogStream", "logs:PutLogEvents").addAllResources());
        // 0 disables, otherwise forward to underlying implementation which picks the sane default
        if (options.taskDrainTimeSeconds !== 0) {
            new instance_drain_hook_1.InstanceDrainHook(autoScalingGroup, 'DrainECSHook', {
                autoScalingGroup,
                cluster: this,
                drainTimeSec: options.taskDrainTimeSeconds
            });
        }
    }
    /**
     * Whether the cluster has EC2 capacity associated with it
     */
    get hasEc2Capacity() {
        return this._hasEc2Capacity;
    }
    /**
     * Export the Cluster
     */
    export() {
        return {
            clusterName: new cdk.CfnOutput(this, 'ClusterName', { value: this.clusterName }).makeImportValue().toString(),
            clusterArn: this.clusterArn,
            vpc: this.vpc.export(),
            securityGroups: this.connections.securityGroups.map(sg => sg.export()),
            hasEc2Capacity: this.hasEc2Capacity,
            defaultNamespace: this._defaultNamespace && this._defaultNamespace.export(),
        };
    }
    /**
     * Metric for cluster CPU reservation
     *
     * @default average over 5 minutes
     */
    metricCpuReservation(props) {
        return this.metric('CPUReservation', props);
    }
    /**
     * Metric for cluster Memory reservation
     *
     * @default average over 5 minutes
     */
    metricMemoryReservation(props) {
        return this.metric('MemoryReservation', props);
    }
    /**
     * Return the given named metric for this Cluster
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/ECS', metricName, dimensions: { ClusterName: this.clusterName } }, props));
    }
}
exports.Cluster = Cluster;
/**
 * Construct a Linux machine image from the latest ECS Optimized AMI published in SSM
 */
class EcsOptimizedAmi {
    constructor(props) {
        this.generation = (props && props.generation) || ec2.AmazonLinuxGeneration.AmazonLinux;
        if (this.generation === ec2.AmazonLinuxGeneration.AmazonLinux2) {
            this.amiParameterName = "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended";
        }
        else {
            this.amiParameterName = "/aws/service/ecs/optimized-ami/amazon-linux/recommended";
        }
    }
    /**
     * Return the correct image
     */
    getImage(scope) {
        const ssmProvider = new cdk.SSMParameterProvider(scope, {
            parameterName: this.amiParameterName
        });
        const json = ssmProvider.parameterValue("{\"image_id\": \"\"}");
        const ami = JSON.parse(json).image_id;
        return new ec2.MachineImage(ami, new ec2.LinuxOS());
    }
}
exports.EcsOptimizedAmi = EcsOptimizedAmi;
/**
 * An Cluster that has been imported
 */
class ImportedCluster extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        /**
         * Security group of the cluster instances
         */
        this.connections = new ec2.Connections();
        this.clusterName = props.clusterName;
        this.vpc = ec2.VpcNetwork.import(this, "vpc", props.vpc);
        this.hasEc2Capacity = props.hasEc2Capacity !== false;
        this._defaultNamespace = props.defaultNamespace && cloudmap.Namespace.import(this, 'Namespace', props.defaultNamespace);
        this.clusterArn = props.clusterArn !== undefined ? props.clusterArn : this.node.stack.formatArn({
            service: 'ecs',
            resource: 'cluster',
            resourceName: props.clusterName,
        });
        let i = 1;
        for (const sgProps of props.securityGroups) {
            this.connections.addSecurityGroup(ec2.SecurityGroup.import(this, `SecurityGroup${i}`, sgProps));
            i++;
        }
    }
    get defaultNamespace() {
        return this._defaultNamespace;
    }
    export() {
        return this.props;
    }
}
/**
 * The type of CloudMap namespace to create
 */
var NamespaceType;
(function (NamespaceType) {
    /**
     * Create a private DNS namespace
     */
    NamespaceType["PrivateDns"] = "PrivateDns";
    /**
     * Create a public DNS namespace
     */
    NamespaceType["PublicDns"] = "PublicDns";
})(NamespaceType = exports.NamespaceType || (exports.NamespaceType = {}));
//# sourceMappingURL=data:application/json;base64,
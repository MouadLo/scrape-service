"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const appscaling = require("@aws-cdk/aws-applicationautoscaling");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const ec2 = require("@aws-cdk/aws-ec2");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const iam = require("@aws-cdk/aws-iam");
const cloudmap = require("@aws-cdk/aws-servicediscovery");
const cdk = require("@aws-cdk/cdk");
const task_definition_1 = require("../base/task-definition");
const ecs_generated_1 = require("../ecs.generated");
const scalable_task_count_1 = require("./scalable-task-count");
/**
 * Base class for Ecs and Fargate services
 */
class BaseService extends cdk.Construct {
    constructor(scope, id, props, additionalProps, clusterName, taskDefinition) {
        super(scope, id);
        /**
         * Manage allowed network traffic for this service
         */
        this.connections = new ec2.Connections();
        this.loadBalancers = new Array();
        this.serviceRegistries = new Array();
        this.taskDefinition = taskDefinition;
        this.resource = new ecs_generated_1.CfnService(this, "Service", Object.assign({ desiredCount: props.desiredCount, serviceName: props.serviceName, loadBalancers: new cdk.Token(() => this.loadBalancers), deploymentConfiguration: {
                maximumPercent: props.maximumPercent || 200,
                minimumHealthyPercent: props.minimumHealthyPercent === undefined ? 50 : props.minimumHealthyPercent
            }, healthCheckGracePeriodSeconds: props.healthCheckGracePeriodSeconds, 
            /* role: never specified, supplanted by Service Linked Role */
            networkConfiguration: new cdk.Token(() => this.networkConfiguration), serviceRegistries: new cdk.Token(() => this.serviceRegistries) }, additionalProps));
        this.serviceArn = this.resource.serviceArn;
        this.serviceName = this.resource.serviceName;
        this.clusterName = clusterName;
        this.cluster = props.cluster;
        if (props.serviceDiscoveryOptions) {
            this.enableServiceDiscovery(props.serviceDiscoveryOptions);
        }
    }
    /**
     * Called when the service is attached to an ALB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToApplicationTargetGroup(targetGroup) {
        const ret = this.attachToELBv2(targetGroup);
        // Open up security groups. For dynamic port mapping, we won't know the port range
        // in advance so we need to open up all ports.
        const port = this.taskDefinition.defaultContainer.ingressPort;
        const portRange = port === 0 ? EPHEMERAL_PORT_RANGE : new ec2.TcpPort(port);
        targetGroup.registerConnectable(this, portRange);
        return ret;
    }
    /**
     * Called when the service is attached to an NLB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToNetworkTargetGroup(targetGroup) {
        return this.attachToELBv2(targetGroup);
    }
    /**
     * Enable autoscaling for the number of tasks in this service
     */
    autoScaleTaskCount(props) {
        if (this.scalableTaskCount) {
            throw new Error('AutoScaling of task count already enabled for this service');
        }
        return this.scalableTaskCount = new scalable_task_count_1.ScalableTaskCount(this, 'TaskCount', Object.assign({ serviceNamespace: appscaling.ServiceNamespace.Ecs, resourceId: `service/${this.clusterName}/${this.resource.serviceName}`, dimension: 'ecs:service:DesiredCount', role: this.makeAutoScalingRole() }, props));
    }
    /**
     * Return the given named metric for this Service
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/ECS', metricName, dimensions: { ServiceName: this.serviceName } }, props));
    }
    /**
     * Set up AWSVPC networking for this construct
     */
    // tslint:disable-next-line:max-line-length
    configureAwsVpcNetworking(vpc, assignPublicIp, vpcSubnets, securityGroup) {
        if (vpcSubnets === undefined) {
            vpcSubnets = { subnetType: assignPublicIp ? ec2.SubnetType.Public : ec2.SubnetType.Private };
        }
        if (securityGroup === undefined) {
            securityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });
        }
        this.connections.addSecurityGroup(securityGroup);
        this.networkConfiguration = {
            awsvpcConfiguration: {
                assignPublicIp: assignPublicIp ? 'ENABLED' : 'DISABLED',
                subnets: vpc.subnetIds(vpcSubnets),
                securityGroups: new cdk.Token(() => [securityGroup.securityGroupId]).toList(),
            }
        };
    }
    renderServiceRegistry(registry) {
        return {
            registryArn: registry.arn,
            containerName: registry.containerName,
            containerPort: registry.containerPort,
        };
    }
    /**
     * Shared logic for attaching to an ELBv2
     */
    attachToELBv2(targetGroup) {
        if (this.taskDefinition.networkMode === task_definition_1.NetworkMode.None) {
            throw new Error("Cannot use a load balancer if NetworkMode is None. Use Bridge, Host or AwsVpc instead.");
        }
        this.loadBalancers.push({
            targetGroupArn: targetGroup.targetGroupArn,
            containerName: this.taskDefinition.defaultContainer.node.id,
            containerPort: this.taskDefinition.defaultContainer.containerPort,
        });
        // Service creation can only happen after the load balancer has
        // been associated with our target group(s), so add ordering dependency.
        this.resource.node.addDependency(targetGroup.loadBalancerAttached);
        const targetType = this.taskDefinition.networkMode === task_definition_1.NetworkMode.AwsVpc ? elbv2.TargetType.Ip : elbv2.TargetType.Instance;
        return { targetType };
    }
    /**
     * Generate the role that will be used for autoscaling this service
     */
    makeAutoScalingRole() {
        // Use a Service Linked Role.
        return iam.Role.import(this, 'ScalingRole', {
            roleArn: this.node.stack.formatArn({
                service: 'iam',
                resource: 'role/aws-service-role/ecs.application-autoscaling.amazonaws.com',
                resourceName: 'AWSServiceRoleForApplicationAutoScaling_ECSService',
            })
        });
    }
    /**
     * Associate Service Discovery (Cloud Map) service
     */
    addServiceRegistry(registry) {
        const sr = this.renderServiceRegistry(registry);
        this.serviceRegistries.push(sr);
    }
    /**
     * Enable CloudMap service discovery for the service
     */
    enableServiceDiscovery(options) {
        const sdNamespace = this.cluster.defaultNamespace;
        if (sdNamespace === undefined) {
            throw new Error("Cannot enable service discovery if a Cloudmap Namespace has not been created in the cluster.");
        }
        // Determine DNS type based on network mode
        const networkMode = this.taskDefinition.networkMode;
        if (networkMode === task_definition_1.NetworkMode.None) {
            throw new Error("Cannot use a service discovery if NetworkMode is None. Use Bridge, Host or AwsVpc instead.");
        }
        // Bridge or host network mode requires SRV records
        let dnsRecordType = options.dnsRecordType;
        if (networkMode === task_definition_1.NetworkMode.Bridge || networkMode === task_definition_1.NetworkMode.Host) {
            if (dnsRecordType === undefined) {
                dnsRecordType = cloudmap.DnsRecordType.SRV;
            }
            if (dnsRecordType !== cloudmap.DnsRecordType.SRV) {
                throw new Error("SRV records must be used when network mode is Bridge or Host.");
            }
        }
        // Default DNS record type for AwsVpc network mode is A Records
        if (networkMode === task_definition_1.NetworkMode.AwsVpc) {
            if (dnsRecordType === undefined) {
                dnsRecordType = cloudmap.DnsRecordType.A;
            }
        }
        // If the task definition that your service task specifies uses the AWSVPC network mode and a type SRV DNS record is
        // used, you must specify a containerName and containerPort combination
        const containerName = dnsRecordType === cloudmap.DnsRecordType.SRV ? this.taskDefinition.defaultContainer.node.id : undefined;
        const containerPort = dnsRecordType === cloudmap.DnsRecordType.SRV ? this.taskDefinition.defaultContainer.containerPort : undefined;
        const cloudmapService = new cloudmap.Service(this, 'CloudmapService', {
            namespace: sdNamespace,
            name: options.name,
            dnsRecordType: dnsRecordType,
            customHealthCheck: { failureThreshold: options.failureThreshold || 1 }
        });
        const serviceArn = cloudmapService.serviceArn;
        // add Cloudmap service to the ECS Service's serviceRegistry
        this.addServiceRegistry({
            arn: serviceArn,
            containerName,
            containerPort
        });
        this.cloudmapService = cloudmapService;
        return cloudmapService;
    }
}
exports.BaseService = BaseService;
/**
 * The port range to open up for dynamic port mapping
 */
const EPHEMERAL_PORT_RANGE = new ec2.TcpPortRange(32768, 65535);
//# sourceMappingURL=data:application/json;base64,
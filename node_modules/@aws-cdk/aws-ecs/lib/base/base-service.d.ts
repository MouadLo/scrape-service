import appscaling = require('@aws-cdk/aws-applicationautoscaling');
import cloudwatch = require('@aws-cdk/aws-cloudwatch');
import ec2 = require('@aws-cdk/aws-ec2');
import elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import cloudmap = require('@aws-cdk/aws-servicediscovery');
import cdk = require('@aws-cdk/cdk');
import { TaskDefinition } from '../base/task-definition';
import { ICluster } from '../cluster';
import { CfnService } from '../ecs.generated';
import { ScalableTaskCount } from './scalable-task-count';
/**
 * Basic service properties
 */
export interface BaseServiceProps {
    /**
     * Cluster where service will be deployed
     */
    readonly cluster: ICluster;
    /**
     * Number of desired copies of running tasks
     *
     * @default 1
     */
    readonly desiredCount?: number;
    /**
     * A name for the service.
     *
     * @default CloudFormation-generated name
     */
    readonly serviceName?: string;
    /**
     * The maximum number of tasks, specified as a percentage of the Amazon ECS
     * service's DesiredCount value, that can run in a service during a
     * deployment.
     *
     * @default 200
     */
    readonly maximumPercent?: number;
    /**
     * The minimum number of tasks, specified as a percentage of
     * the Amazon ECS service's DesiredCount value, that must
     * continue to run and remain healthy during a deployment.
     *
     * @default 50
     */
    readonly minimumHealthyPercent?: number;
    /**
     * Time after startup to ignore unhealthy load balancer checks.
     *
     * @default ??? FIXME
     */
    readonly healthCheckGracePeriodSeconds?: number;
    /**
     * Options for enabling AWS Cloud Map service discovery for the service
     */
    readonly serviceDiscoveryOptions?: ServiceDiscoveryOptions;
}
/**
 * Base class for Ecs and Fargate services
 */
export declare abstract class BaseService extends cdk.Construct implements elbv2.IApplicationLoadBalancerTarget, elbv2.INetworkLoadBalancerTarget {
    /**
     * Manage allowed network traffic for this service
     */
    readonly connections: ec2.Connections;
    /**
     * ARN of this service
     */
    readonly serviceArn: string;
    /**
     * Name of this service
     */
    readonly serviceName: string;
    /**
     * Name of this service's cluster
     */
    readonly clusterName: string;
    /**
     * Task definition this service is associated with
     */
    readonly taskDefinition: TaskDefinition;
    protected cloudmapService?: cloudmap.Service;
    protected cluster: ICluster;
    protected loadBalancers: CfnService.LoadBalancerProperty[];
    protected networkConfiguration?: CfnService.NetworkConfigurationProperty;
    protected serviceRegistries: CfnService.ServiceRegistryProperty[];
    private readonly resource;
    private scalableTaskCount?;
    constructor(scope: cdk.Construct, id: string, props: BaseServiceProps, additionalProps: any, clusterName: string, taskDefinition: TaskDefinition);
    /**
     * Called when the service is attached to an ALB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToApplicationTargetGroup(targetGroup: elbv2.ApplicationTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Called when the service is attached to an NLB
     *
     * Don't call this function directly. Instead, call listener.addTarget()
     * to add this service to a load balancer.
     */
    attachToNetworkTargetGroup(targetGroup: elbv2.NetworkTargetGroup): elbv2.LoadBalancerTargetProps;
    /**
     * Enable autoscaling for the number of tasks in this service
     */
    autoScaleTaskCount(props: appscaling.EnableScalingProps): ScalableTaskCount;
    /**
     * Return the given named metric for this Service
     */
    metric(metricName: string, props?: cloudwatch.MetricCustomization): cloudwatch.Metric;
    /**
     * Set up AWSVPC networking for this construct
     */
    protected configureAwsVpcNetworking(vpc: ec2.IVpcNetwork, assignPublicIp?: boolean, vpcSubnets?: ec2.SubnetSelection, securityGroup?: ec2.ISecurityGroup): void;
    private renderServiceRegistry;
    /**
     * Shared logic for attaching to an ELBv2
     */
    private attachToELBv2;
    /**
     * Generate the role that will be used for autoscaling this service
     */
    private makeAutoScalingRole;
    /**
     * Associate Service Discovery (Cloud Map) service
     */
    private addServiceRegistry;
    /**
     * Enable CloudMap service discovery for the service
     */
    private enableServiceDiscovery;
}
/**
 * Options for enabling service discovery on an ECS service
 */
export interface ServiceDiscoveryOptions {
    /**
     * Name of the cloudmap service to attach to the ECS Service
     *
     * @default CloudFormation-generated name
     */
    readonly name?: string;
    /**
     * The DNS type of the record that you want AWS Cloud Map to create. Supported record types include A or SRV.
     *
     * @default: A
     */
    readonly dnsRecordType?: cloudmap.DnsRecordType.A | cloudmap.DnsRecordType.SRV;
    /**
     * The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.
     *
     * @default 60
     */
    readonly dnsTtlSec?: number;
    /**
     * The number of 30-second intervals that you want Cloud Map to wait after receiving an
     * UpdateInstanceCustomHealthStatus request before it changes the health status of a service instance.
     * NOTE: This is used for HealthCheckCustomConfig
     */
    readonly failureThreshold?: number;
}
/**
 * Service Registry for ECS service
 */
export interface ServiceRegistry {
    /**
     * Arn of the Cloud Map Service that will register a Cloud Map Instance for your ECS Service
     */
    readonly arn: string;
    /**
     * The container name value, already specified in the task definition, to be used for your service discovery service.
     * If the task definition that your service task specifies uses the bridge or host network mode,
     * you must specify a containerName and containerPort combination from the task definition.
     * If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is
     * used, you must specify either a containerName and containerPort combination or a port value, but not both.
     */
    readonly containerName?: string;
    /**
     * The container port value, already specified in the task definition, to be used for your service discovery service.
     * If the task definition that your service task specifies uses the bridge or host network mode,
     * you must specify a containerName and containerPort combination from the task definition.
     * If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is
     * used, you must specify either a containerName and containerPort combination or a port value, but not both.
     */
    readonly containerPort?: number;
}
